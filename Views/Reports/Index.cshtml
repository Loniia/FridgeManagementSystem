@model FridgeManagementSystem.Models.ReportDashboardViewModel

@{
    ViewData["Title"] = "Reports Dashboard";
    Layout = "_Layout";
}

<style>
    .container-fluid {
        padding: 8px 12px;
        background: #f8f9fa;
    }

    .header-section {
        margin-bottom: 12px;
    }

        .header-section h1 {
            font-size: 1.4rem;
            font-weight: 600;
            color: #2c3e50;
            margin-bottom: 8px;
        }

    .btn-compact {
        padding: 5px 10px;
        font-size: 0.8rem;
        border-radius: 3px;
    }

    .card {
        margin-bottom: 12px;
        border: 1px solid #dee2e6;
        border-radius: 5px;
        box-shadow: 0 1px 2px rgba(0,0,0,0.08);
    }

    .card-header {
        padding: 8px 12px;
        font-size: 0.9rem;
        font-weight: 600;
    }

    .card-body {
        padding: 12px;
    }

    .summary-card {
        padding: 10px;
        margin-bottom: 8px;
        border-radius: 4px;
    }

        .summary-card .card-title {
            font-size: 0.75rem;
            margin-bottom: 4px;
            font-weight: 600;
        }

        .summary-card h2 {
            font-size: 1.3rem;
            font-weight: 700;
            margin-bottom: 2px;
        }

        .summary-card small {
            font-size: 0.7rem;
            opacity: 0.8;
        }

    .chart-container {
        height: 180px;
        margin: 8px 0;
    }

    .table-sm {
        font-size: 0.8rem;
    }

        .table-sm th,
        .table-sm td {
            padding: 6px 8px;
        }

    .row {
        margin-bottom: 8px;
    }

    .mb-2 {
        margin-bottom: 6px !important;
    }

    .mb-3 {
        margin-bottom: 10px !important;
    }

    .mt-2 {
        margin-top: 6px !important;
    }

    section {
        margin-bottom: 16px;
    }

    .form-label {
        font-size: 0.85rem;
        margin-bottom: 4px;
        font-weight: 500;
    }

    .bg-primary {
        background: linear-gradient(135deg, #3498db, #2980b9) !important;
    }

    .bg-success {
        background: linear-gradient(135deg, #27ae60, #219653) !important;
    }

    .bg-warning {
        background: linear-gradient(135deg, #f39c12, #e67e22) !important;
    }

    .bg-info {
        background: linear-gradient(135deg, #17a2b8, #138496) !important;
    }

    .bg-danger {
        background: linear-gradient(135deg, #e74c3c, #c0392b) !important;
    }

    .fas, .fab {
        font-size: 0.85rem;
        margin-right: 4px;
    }

    .loading {
        opacity: 0.6;
        pointer-events: none;
    }

    .spinner-sm {
        width: 0.9rem;
        height: 0.9rem;
    }

    @@media (max-width: 768px) {
        .container-fluid {
            padding: 6px 8px;
        }

        .summary-card {
            margin-bottom: 6px;
        }

        .chart-container {
            height: 140px;
        }

        .card-header {
            padding: 6px 10px;
            font-size: 0.85rem;
        }

        .card-body {
            padding: 10px;
        }
    }
</style>

<div class="container-fluid">
    <!-- Compact Header Section -->
    <div class="header-section">
        <div class="d-flex justify-content-between align-items-center">
            <a href="@Url.Action("Dashboard", "ManageEmployee", new { area = "Administrator" })" class="btn btn-secondary btn-compact">
                <i class="fas fa-arrow-left"></i>Back to Dashboard
            </a>
            <h1 class="mb-0">Reports Dashboard</h1>
        </div>
    </div>

    <!-- Maintenance Performance - Compact -->
    <div class="card mb-3">
        <div class="card-header bg-info text-white">
            <i class="fas fa-chart-bar"></i>Maintenance Performance - This Month
        </div>
        <div class="card-body">
            <canvas id="maintenanceChart" height="120"></canvas>
        </div>
    </div>

    <!-- Customer Management Reports - Compact -->
    <section class="mb-4">
        <div class="card">
            <div class="card-header bg-success text-white">
                <i class="fas fa-users"></i> Customer Management Report
            </div>
            <div class="card-body p-2">
                <!-- Fridges Overview Chart Only -->
                <div class="col-12 mb-3">
                    <div class="card">
                        <div class="card-header py-2">
                            <h6 class="card-title mb-0">Fridges Overview</h6>
                        </div>
                        <div class="card-body p-2 d-flex justify-content-center">
                            <canvas id="fridgeChart" height="300" style="max-width:100%;"></canvas>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <!-- Top 10 Customers Table in its own section -->
    <section class="mb-4">
        <div class="card">
            <div class="card-header bg-success text-white">
                <i class="fas fa-users"></i> Top 10 Customers
            </div>
            <div class="card-body p-2 table-responsive">
                <table class="table table-sm table-striped table-bordered mb-0">
                    <thead class="table-dark">
                        <tr>
                            <th>#</th>
                            <th>Customer Name</th>
                            <th>Total Amount</th>
                        </tr>
                    </thead>
                    <tbody>
                        @for (int i = 0; i < Model.TopCustomers.Count; i++)
                        {
                            <tr>
                                <td>@(i + 1)</td>
                                <td>@Model.TopCustomers[i].Name</td>
                                <td>@Model.TopCustomers[i].TotalAmount.ToString("C")</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
        <!-- Custom Reports Actions -->
        <div class="row mt-4">
            <div class="col-12 text-center">
                <div class="card bg-light">
                    <div class="card-body">
                        <h5 class="card-title">Custom Report Actions</h5>
                        <p class="card-text">Generate custom reports and export data for further analysis.</p>
                        <button class="btn btn-info me-2">
                            <i class="fas fa-download me-2"></i>Export Report
                        </button>
                        <button class="btn btn-outline-info">
                            <i class="fas fa-plus me-2"></i>Create Custom Report
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Customer Spending Report Button -->
        <div class="row mt-3">
            <div class="col-12 text-center">
                <a href="@Url.Action("AllCustomersSpendingReport", "Reports")" class="btn btn-primary btn-sm">
                    <i class="fas fa-users me-2"></i> View Customer Spending Report
                </a>
            </div>
        </div>
    </section>

    <!-- Fault Management Reports - Compact (Like Customer & Maintenance Sections) -->
    <section class="mb-4">
        <div class="card">
            <div class="card-header bg-danger text-white">
                <i class="fas fa-exclamation-triangle"></i>Fault Management Report
            </div>
            <div class="card-body p-2">
                <!-- Fault Summary Cards -->
                <div class="row mb-3">
                    <div class="col-md-3">
                        <div class="card text-white bg-danger summary-card">
                            <div class="card-body text-center p-2">
                                <h6 class="card-title">Total Faults</h6>
                                <h2 id="totalFaults" class="mb-1">0</h2>
                                <small>All Time</small>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card text-white bg-warning summary-card">
                            <div class="card-body text-center p-2">
                                <h6 class="card-title">Pending Faults</h6>
                                <h2 id="pendingFaults" class="mb-1">0</h2>
                                <small>Awaiting Action</small>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card text-white bg-primary summary-card">
                            <div class="card-body text-center p-2">
                                <h6 class="card-title">High Priority</h6>
                                <h2 id="highPriorityFaults" class="mb-1">0</h2>
                                <small>Urgent Cases</small>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card text-white bg-success summary-card">
                            <div class="card-body text-center p-2">
                                <h6 class="card-title">Avg Resolution</h6>
                                <h2 id="avgResolutionDays" class="mb-1">0</h2>
                                <small>Days</small>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Fault Charts -->
                <div class="row">
                    <div class="col-md-6">
                        <div class="card">
                            <div class="card-header py-2">
                                <h6 class="card-title mb-0">Fault Type Distribution</h6>
                            </div>
                            <div class="card-body p-2">
                                <canvas id="faultTypeChart" height="200"></canvas>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="card">
                            <div class="card-header py-2">
                                <h6 class="card-title mb-0">Urgency Level Distribution</h6>
                            </div>
                            <div class="card-body p-2">
                                <canvas id="faultUrgencyChart" height="200"></canvas>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Action Card -->
                <div class="row mt-3">
                    <div class="col-12">
                        <div class="card bg-light">
                            <div class="card-body text-center py-3">
                                <h6 class="card-title mb-2">Need Detailed Fault Analysis?</h6>
                                <p class="card-text mb-2 small">Access comprehensive fault analytics with detailed breakdowns.</p>
                                <a href="@Url.Action("FaultReports", "Reports")" class="btn btn-danger btn-sm">
                                    <i class="fas fa-chart-bar"></i>View Detailed Reports
                                </a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        // Initialize charts when page loads
        $(document).ready(function () {
            createFridgeStatusChart();
            loadFaultSummaryData();
            loadFaultTypeDistribution();
            loadUrgencyDistribution();
        });

        // ===== FAULT REPORTS DATA FETCHING =====

        // Load fault summary data for cards
        async function loadFaultSummaryData() {
            try {
                const response = await fetch('/Reports/GetFaultSummaryData');
                if (!response.ok) throw new Error('Network response was not ok');

                const data = await response.json();

                // Update summary cards
                document.getElementById('totalFaults').textContent = data.totalFaults.toLocaleString();
                document.getElementById('pendingFaults').textContent = data.pendingFaults.toLocaleString();
                document.getElementById('highPriorityFaults').textContent = data.highPriorityFaults.toLocaleString();
                document.getElementById('avgResolutionDays').textContent = data.averageResolutionDays.toFixed(1);

            } catch (error) {
                console.error('Error loading fault summary data:', error);
                // Set fallback values
                document.getElementById('totalFaults').textContent = '0';
                document.getElementById('pendingFaults').textContent = '0';
                document.getElementById('highPriorityFaults').textContent = '0';
                document.getElementById('avgResolutionDays').textContent = '0';
            }
        }

        // Load fault type distribution chart
        async function loadFaultTypeDistribution() {
            try {
                const response = await fetch('/Reports/GetFaultTypeDistribution');
                if (!response.ok) throw new Error('Network response was not ok');

                const data = await response.json();
                renderFaultTypeChart(data.data || data);

            } catch (error) {
                console.error('Error loading fault type distribution:', error);
                renderFaultTypeChart([]);
            }
        }

        // Load urgency level distribution chart
        async function loadUrgencyDistribution() {
            try {
                const response = await fetch('/Reports/GetUrgencyDistribution');
                if (!response.ok) throw new Error('Network response was not ok');

                const data = await response.json();
                renderUrgencyChart(data.data || data);

            } catch (error) {
                console.error('Error loading urgency distribution:', error);
                renderUrgencyChart([]);
            }
        }

        // ===== CHART RENDERING FUNCTIONS =====

        function renderFaultTypeChart(data) {
            const ctx = document.getElementById('faultTypeChart');
            if (!ctx) return;

            // Destroy existing chart if it exists
            if (ctx.chart) {
                ctx.chart.destroy();
            }

            // If no data, show empty state
            if (!data || data.length === 0) {
                ctx.getContext('2d').fillText('No data available', 10, 10);
                return;
            }

            ctx.chart = new Chart(ctx, {
                type: 'doughnut',
                data: {
                    labels: data.map(item => item.faultType),
                    datasets: [{
                        data: data.map(item => item.count),
                        backgroundColor: [
                            '#e74c3c', '#3498db', '#f39c12', '#2ecc71',
                            '#9b59b6', '#1abc9c', '#34495e', '#f1c40f'
                        ],
                        borderWidth: 1,
                        borderColor: '#fff'
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'right',
                            labels: {
                                boxWidth: 12,
                                font: {
                                    size: 9
                                }
                            }
                        }
                    },
                    cutout: '60%'
                }
            });
        }

        function renderUrgencyChart(data) {
            const ctx = document.getElementById('faultUrgencyChart');
            if (!ctx) return;

            // Destroy existing chart if it exists
            if (ctx.chart) {
                ctx.chart.destroy();
            }

            // If no data, show empty state
            if (!data || data.length === 0) {
                ctx.getContext('2d').fillText('No data available', 10, 10);
                return;
            }

            // Define urgency level colors
            const urgencyColors = {
                'Emergency': '#c0392b',
                'Critical': '#e74c3c',
                'High': '#e67e22',
                'Medium': '#f39c12',
                'Low': '#27ae60'
            };

            ctx.chart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: data.map(item => item.urgencyLevel),
                    datasets: [{
                        label: 'Number of Faults',
                        data: data.map(item => item.count),
                        backgroundColor: data.map(item => urgencyColors[item.urgencyLevel] || '#95a5a6'),
                        borderWidth: 0,
                        borderRadius: 4
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                font: {
                                    size: 9
                                },
                                precision: 0
                            }
                        },
                        x: {
                            ticks: {
                                font: {
                                    size: 9
                                }
                            }
                        }
                    }
                }
            });
        }

        // ===== EXISTING CHARTS =====

        var ctx = document.getElementById('maintenanceChart').getContext('2d');
        var chart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: ['Completed Tasks', 'Avg Days to Complete', 'Success Rate %', 'Repeat Visits'],
                datasets: [{
                    label: 'Maintenance KPI',
                    data: [
        @Model.MaintenanceKpi.CompletedThisMonth,
        @Model.MaintenanceKpi.AvgCompletionDays.ToString("0"),
        @Model.MaintenanceKpi.SuccessRate.ToString("0"),
        @Model.MaintenanceKpi.MonthlyRepeatVisits
                    ],
                    backgroundColor: ['#3498db', '#2ecc71', '#f1c40f', '#e74c3c']
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    y: { beginAtZero: true }
                },
                plugins: {
                    legend: { display: false }
                }
            }
        });

        function createFridgeStatusChart() {
            var ctx = document.getElementById('fridgeChart').getContext('2d');
            var fridgeChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: ['Received', 'Purchased', 'Scrapped', 'Low Stock', 'Returned'],
                    datasets: [{
                        label: 'Fridges Overview',
                        data: [
        @Model.Received,
        @Model.Purchased,
        @Model.Scrapped,
        @Model.LowStock,
        @Model.Returned
                        ],
                        backgroundColor: 'rgba(46, 204, 113, 0.2)',
                        borderColor: 'rgba(46, 204, 113, 1)',
                        borderWidth: 3,
                        tension: 0.4,
                        fill: true,
                        pointRadius: 6,
                        pointBackgroundColor: 'rgba(39, 174, 96, 1)'
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: { display: true },
                        title: { display: true, text: 'Fridges Overview' }
                    },
                    scales: {
                        y: { beginAtZero: true }
                    }
                }
            });
        }
    </script>
}