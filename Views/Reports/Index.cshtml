@model FridgeManagementSystem.Models.ReportDashboardViewModel

@{
    ViewData["Title"] = "Reports Dashboard";
    Layout = "_Layout";
}

<div class="container-fluid">
    <!-- Go Back To Dashboard Button -->
    <div class="row mb-4">
        <div class="col-12">
            <a href="https://localhost:7130/Administrator/ManageEmployee/Dashboard" class="btn btn-secondary">
                <i class="fas fa-arrow-left me-2"></i>Go Back To Dashboard
            </a>
        </div>
    </div>
</div>
<div class="container-fluid">
    <h1 class="mb-4">Reports Dashboard</h1>

    <div class="container mt-4">
        <h2 class="text-center mb-4">Maintenance Performance - This Month</h2>

        <canvas id="maintenanceChart" width="400" height="200"></canvas>
    </div>


    <!-- Customer Management Reports Section -->
    <section class="mb-5">
        <div class="card">
            <div class="card-header bg-success text-white">
                <h3 class="card-title mb-0">
                    <i class="fas fa-users me-2"></i>Customer Management Reports
                </h3>
            </div>
            <div class="card-body">
                <!-- Customer Summary Cards -->
                <div class="row mb-4">
                    <div class="col-md-3">
                        <div class="card text-white bg-primary">
                            <div class="card-body text-center">
                                <h6 class="card-title">Total Customers</h6>
                                <h2 id="totalCustomers" class="mb-0">0</h2>
                                <small>Active & Inactive</small>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card text-white bg-success">
                            <div class="card-body text-center">
                                <h6 class="card-title">Active Customers</h6>
                                <h2 id="activeCustomers" class="mb-0">0</h2>
                                <small>With Allocations</small>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card text-white bg-warning">
                            <div class="card-body text-center">
                                <h6 class="card-title">Total Fridges Allocated</h6>
                                <h2 id="totalAllocated" class="mb-0">0</h2>
                                <small>Currently Active</small>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card text-white bg-info">
                            <div class="card-body text-center">
                                <h6 class="card-title">Available Fridges</h6>
                                <h2 id="availableFridges" class="mb-0">0</h2>
                                <small>In Stock</small>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Customer Distribution Overview -->
                <div class="row mb-4">
                    <div class="col-md-8">
                        <div class="card h-100">
                            <div class="card-header">
                                <h5 class="card-title">Customer Distribution by Location</h5>
                            </div>
                            <div class="card-body">
                                <canvas id="locationDistributionChart" height="250"></canvas>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="card h-100">
                            <div class="card-header">
                                <h5 class="card-title">Customer Status</h5>
                            </div>
                            <div class="card-body">
                                <canvas id="customerStatusChart" height="250"></canvas>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Fridge Allocation Summary -->
                <div class="row mb-4">
                    <div class="col-md-12">
                        <div class="card">
                            <div class="card-header">
                                <h5 class="card-title">Fridge Allocation Summary</h5>
                            </div>
                            <div class="card-body">
                                <div class="table-responsive">
                                    <table class="table table-bordered">
                                        <thead class="table-light">
                                            <tr>
                                                <th>Status</th>
                                                <th class="text-end">Count</th>
                                                <th class="text-end">Percentage</th>
                                            </tr>
                                        </thead>
                                        <tbody id="fridgeAllocationSummary">
                                            <tr><td colspan="3" class="text-center">Loading data...</td></tr>
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Allocation Trends -->
                <div class="row">
                    <div class="col-md-12">
                        <div class="card">
                            <div class="card-header">
                                <h5 class="card-title">Allocation Trends (Last 6 Months)</h5>
                            </div>
                            <div class="card-body">
                                <canvas id="allocationTrendsChart" height="120"></canvas>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Top Customers by Fridge Count -->
                <div class="row mt-4">
                    <div class="col-md-12">
                        <div class="card">
                            <div class="card-header">
                                <h5 class="card-title">Top Customers by Fridge Allocations</h5>
                            </div>
                            <div class="card-body">
                                <canvas id="topCustomersChart" height="150"></canvas>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>
</div>
<!-- Add this section AFTER the Customer Management Reports section -->
<section class="mb-5">
    <div class="card">
        <div class="card-header bg-danger text-white">
            <h3 class="card-title mb-0">
                <i class="fas fa-exclamation-triangle me-2"></i>Fault Management Reports
            </h3>
        </div>
        <div class="card-body">
            <!-- Fault Summary Cards -->
            <div class="row mb-4">
                <div class="col-md-3">
                    <div class="card text-white bg-danger">
                        <div class="card-body text-center">
                            <h6 class="card-title">Total Faults</h6>
                            <h2 id="totalFaults" class="mb-0">0</h2>
                            <small>All Time</small>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card text-white bg-warning">
                        <div class="card-body text-center">
                            <h6 class="card-title">Pending Faults</h6>
                            <h2 id="pendingFaults" class="mb-0">0</h2>
                            <small>Awaiting Action</small>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card text-white bg-primary">
                        <div class="card-body text-center">
                            <h6 class="card-title">High Priority</h6>
                            <h2 id="highPriorityFaults" class="mb-0">0</h2>
                            <small>Urgent Cases</small>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card text-white bg-success">
                        <div class="card-body text-center">
                            <h6 class="card-title">Avg Resolution</h6>
                            <h2 id="avgResolutionDays" class="mb-0">0</h2>
                            <small>Days</small>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Fault Distribution Charts -->
            <div class="row mb-4">
                <div class="col-md-6">
                    <div class="card h-100">
                        <div class="card-header">
                            <h5 class="card-title">Fault Type Distribution</h5>
                        </div>
                        <div class="card-body">
                            <canvas id="faultTypeChart" height="250"></canvas>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="card h-100">
                        <div class="card-header">
                            <h5 class="card-title">Urgency Level Distribution</h5>
                        </div>
                        <div class="card-body">
                            <canvas id="faultUrgencyChart" height="250"></canvas>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Monthly Trends -->
            <div class="row mb-4">
                <div class="col-md-12">
                    <div class="card">
                        <div class="card-header">
                            <h5 class="card-title">Fault Trends (Last 6 Months)</h5>
                        </div>
                        <div class="card-body">
                            <canvas id="faultTrendsChart" height="120"></canvas>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Brand Analysis and Status -->
            <div class="row">
                <div class="col-md-8">
                    <div class="card h-100">
                        <div class="card-header">
                            <h5 class="card-title">Top Fault-Prone Brands</h5>
                        </div>
                        <div class="card-body">
                            <canvas id="brandFaultChart" height="250"></canvas>
                        </div>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="card h-100">
                        <div class="card-header">
                            <h5 class="card-title">Fault Status</h5>
                        </div>
                        <div class="card-body">
                            <canvas id="faultStatusChart" height="250"></canvas>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Detailed Reports Link -->
            <div class="row mt-4">
                <div class="col-12 text-center">
                    <div class="card bg-light">
                        <div class="card-body">
                            <h5 class="card-title">Need More Detailed Fault Analysis?</h5>
                            <p class="card-text">Access comprehensive fault analytics with detailed breakdowns, technician performance, and resolution time analysis.</p>
                            <a href="@Url.Action("FaultReports", "Reports")" class="btn btn-danger btn-lg">
                                <i class="fas fa-chart-bar me-2"></i>View Detailed Fault Reports
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<!-- Add this section AFTER the Fault Management Reports section -->
<section class="mb-5">
    <div class="card">
        <div class="card-header bg-info text-white">
            <h3 class="card-title mb-0">
                <i class="fas fa-chart-line me-2"></i>My Custom Reports
            </h3>
        </div>
        <div class="card-body">
            <!-- Custom Reports Summary Cards -->
            <div class="row mb-4">
                <div class="col-md-3">
                    <div class="card text-white bg-primary">
                        <div class="card-body text-center">
                            <h6 class="card-title">Total Revenue</h6>
                            <h2 class="mb-0">$12,450</h2>
                            <small>Current Month</small>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card text-white bg-success">
                        <div class="card-body text-center">
                            <h6 class="card-title">Active Projects</h6>
                            <h2 class="mb-0">15</h2>
                            <small>In Progress</small>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card text-white bg-warning">
                        <div class="card-body text-center">
                            <h6 class="card-title">Customer Satisfaction</h6>
                            <h2 class="mb-0">92%</h2>
                            <small>Average Rating</small>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card text-white bg-danger">
                        <div class="card-body text-center">
                            <h6 class="card-title">Pending Tasks</h6>
                            <h2 class="mb-0">8</h2>
                            <small>Require Attention</small>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Custom Charts Row -->
            <div class="row mb-4">
                <div class="col-md-6">
                    <div class="card h-100">
                        <div class="card-header">
                            <h5 class="card-title">Monthly Performance</h5>
                        </div>
                        <div class="card-body">
                            <div class="text-center p-4">
                                <p class="text-muted">Performance chart will be displayed here</p>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="card h-100">
                        <div class="card-header">
                            <h5 class="card-title">Project Distribution</h5>
                        </div>
                        <div class="card-body">
                            <div class="text-center p-4">
                                <p class="text-muted">Project distribution chart will be displayed here</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Additional Custom Reports -->
            <div class="row">
                <div class="col-md-12">
                    <div class="card">
                        <div class="card-header">
                            <h5 class="card-title">Quarterly Growth Trends</h5>
                        </div>
                        <div class="card-body">
                            <div class="text-center p-4">
                                <p class="text-muted">Growth trends chart will be displayed here</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Custom Reports Actions -->
            <div class="row mt-4">
                <div class="col-12 text-center">
                    <div class="card bg-light">
                        <div class="card-body">
                            <h5 class="card-title">Custom Report Actions</h5>
                            <p class="card-text">Generate custom reports and export data for further analysis.</p>
                            <button class="btn btn-info me-2">
                                <i class="fas fa-download me-2"></i>Export Report
                            </button>
                            <button class="btn btn-outline-info">
                                <i class="fas fa-plus me-2"></i>Create Custom Report
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- ✅ Buttons Row -->
            <div class="row mb-4">
                <div class="col-12 d-flex justify-content-end gap-2">
                    <!-- View All Customers Spending -->
                    <a asp-controller="Reports" asp-action="AllCustomersSpendingReport"
                       class="btn btn-info px-3">
                        View All Customers Spending
                    </a>

                    <!-- Go Back to Dashboard -->
                    <a asp-area="Administrator" asp-controller="ManageEmployee" asp-action="Dashboard"
                       class="btn btn-secondary px-3">
                        Go Back to Dashboard
                    </a>
                </div>
            </div>
        </div>
    </div>
</section>
@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    
       
    <script>
        var ctx = document.getElementById('maintenanceChart').getContext('2d');

         var chart = new Chart(ctx, {
             type: 'bar',
             data: {
                 labels: ['Completed Tasks', 'Avg Days to Complete', 'Success Rate %', 'Repeat Visits'],
                 datasets: [{
                     label: 'Maintenance KPI',
                     data: [
                         @Model.MaintenanceKpi.CompletedThisMonth,
                         @Model.MaintenanceKpi.AvgCompletionDays.ToString("0"),
                         @Model.MaintenanceKpi.SuccessRate.ToString("0"),
                         @Model.MaintenanceKpi.MonthlyRepeatVisits
                     ],
                     backgroundColor: [
                         '#3498db',
                         '#2ecc71',
                         '#f1c40f',
                         '#e74c3c'
                     ]
                 }]
             },
             options: {
                 responsive: true,
                 scales: {
                     y: { beginAtZero: true }
                 }
             }
         });
        
        // =============================================
        // CUSTOMER MANAGEMENT REPORT FUNCTIONS
        // =============================================
        async function loadCustomerReports() {
            debugLog('Loading customer reports...');

            try {
                // Use a simple test data if controller actions don't exist
                const customerData = await tryLoadCustomerData();

                if (customerData) {
                    await createCustomerCharts(customerData);
                } else {
                    // Use sample data for testing
                    debugLog('Using sample customer data');
                    const sampleData = getSampleCustomerData();
                    await createCustomerCharts(sampleData);
                }
            } catch (error) {
                debugLog('Error in loadCustomerReports:', error);
                // Use sample data as fallback
                const sampleData = getSampleCustomerData();
                await createCustomerCharts(sampleData);
            }
        }

        async function tryLoadCustomerData() {
            try {
                // Try different possible controller names and routes
                const urls = [
                    '@Url.Action("GetCustomerSummaryData", "CustomerLiaison")',
                    '/CustomerManagementSubSystem/CustomerLiaison/GetCustomerSummaryData',
                    '/CustomerLiaison/GetCustomerSummaryData'
                ];

                for (const url of urls) {
                    try {
                        debugLog(`Trying customer URL: ${url}`);
                        const response = await fetch(url);
                        if (response.ok) {
                            const data = await response.json();
                            debugLog('Successfully loaded customer data from:', url);
                            return data;
                        }
                    } catch (e) {
                        debugLog(`Failed to load customer data from ${url}:`, e.message);
                    }
                }
                return null;
            } catch (error) {
                debugLog('Error in tryLoadCustomerData:', error);
                return null;
            }
        }

        async function createCustomerCharts(data) {
            try {
                // Update summary cards
                document.getElementById('totalCustomers').textContent = data.summary?.totalCustomers || '45';
                document.getElementById('activeCustomers').textContent = data.summary?.activeCustomers || '38';
                document.getElementById('totalAllocated').textContent = data.summary?.totalAllocated || '67';
                document.getElementById('availableFridges').textContent = data.summary?.availableFridges || '23';

                // Create customer status chart
                createCustomerStatusChart(data.customerStatus);

                // Create location distribution chart
                createLocationDistributionChart(data.locations);

                // Update allocation summary table
                updateAllocationSummaryTable(data.allocationSummary);

                // Create allocation trends chart
                createAllocationTrendsChart(data.trends);

                // Create top customers chart
                createTopCustomersChart(data.topCustomers);

            } catch (error) {
                debugLog('Error creating customer charts:', error);
            }
        }

        function createCustomerStatusChart(data) {
            try {
                const ctx = document.getElementById('customerStatusChart').getContext('2d');
                new Chart(ctx, {
                    type: 'doughnut',
                    data: {
                        labels: data.map(s => s.status),
                        datasets: [{
                            data: data.map(s => s.count),
                            backgroundColor: [
                                'rgba(40, 167, 69, 0.8)',
                                'rgba(108, 117, 125, 0.8)'
                            ],
                            borderWidth: 2
                        }]
                    },
                    options: {
                        responsive: true,
                        plugins: {
                            legend: {
                                position: 'bottom'
                            }
                        }
                    }
                });
                debugLog('Customer status chart created successfully');
            } catch (error) {
                debugLog('Error creating customer status chart:', error);
            }
        }

        function createLocationDistributionChart(data) {
            try {
                const ctx = document.getElementById('locationDistributionChart').getContext('2d');
                new Chart(ctx, {
                    type: 'bar',
                    data: {
                        labels: data.map(l => l.location),
                        datasets: [
                            {
                                label: 'Customers',
                                data: data.map(l => l.customerCount),
                                backgroundColor: 'rgba(54, 162, 235, 0.6)',
                                borderColor: 'rgba(54, 162, 235, 1)',
                                borderWidth: 1
                            },
                            {
                                label: 'Active Allocations',
                                data: data.map(l => l.activeAllocations),
                                backgroundColor: 'rgba(40, 167, 69, 0.6)',
                                borderColor: 'rgba(40, 167, 69, 1)',
                                borderWidth: 1
                            }
                        ]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
                debugLog('Location distribution chart created successfully');
            } catch (error) {
                debugLog('Error creating location distribution chart:', error);
            }
        }

        function updateAllocationSummaryTable(data) {
            try {
                const tableBody = document.getElementById('fridgeAllocationSummary');
                if (data && data.length > 0) {
                    tableBody.innerHTML = data.map(item => `
                        <tr>
                            <td>${item.status}</td>
                            <td class="text-end">${item.count}</td>
                            <td class="text-end">${item.percentage}%</td>
                        </tr>
                    `).join('');
                } else {
                    tableBody.innerHTML = `
                        <tr><td>Allocated</td><td class="text-end">67</td><td class="text-end">65%</td></tr>
                        <tr><td>Returned</td><td class="text-end">25</td><td class="text-end">24%</td></tr>
                        <tr><td>Scrapped</td><td class="text-end">11</td><td class="text-end">11%</td></tr>
                    `;
                }
                debugLog('Allocation summary table updated successfully');
            } catch (error) {
                debugLog('Error updating allocation summary table:', error);
            }
        }

        function createAllocationTrendsChart(data) {
            try {
                const ctx = document.getElementById('allocationTrendsChart').getContext('2d');
                new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: data.map(t => t.month),
                        datasets: [
                            {
                                label: 'New Allocations',
                                data: data.map(t => t.allocations),
                                borderColor: 'rgba(40, 167, 69, 1)',
                                backgroundColor: 'rgba(40, 167, 69, 0.1)',
                                borderWidth: 3,
                                tension: 0.4,
                                fill: true
                            },
                            {
                                label: 'Returns',
                                data: data.map(t => t.returns),
                                borderColor: 'rgba(255, 193, 7, 1)',
                                backgroundColor: 'rgba(255, 193, 7, 0.1)',
                                borderWidth: 3,
                                tension: 0.4,
                                fill: true
                            },
                            {
                                label: 'Scrapped',
                                data: data.map(t => t.scrapped),
                                borderColor: 'rgba(220, 53, 69, 1)',
                                backgroundColor: 'rgba(220, 53, 69, 0.1)',
                                borderWidth: 3,
                                tension: 0.4,
                                fill: true
                            }
                        ]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
                debugLog('Allocation trends chart created successfully');
            } catch (error) {
                debugLog('Error creating allocation trends chart:', error);
            }
        }

        function createTopCustomersChart(data) {
            try {
                const ctx = document.getElementById('topCustomersChart').getContext('2d');
                new Chart(ctx, {
                    type: 'bar',
                    data: {
                        labels: data.map(c => c.customerName),
                        datasets: [
                            {
                                label: 'Active Allocations',
                                data: data.map(c => c.activeAllocations),
                                backgroundColor: 'rgba(40, 167, 69, 0.8)'
                            },
                            {
                                label: 'Returned',
                                data: data.map(c => c.returnedAllocations),
                                backgroundColor: 'rgba(255, 193, 7, 0.8)'
                            }
                        ]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            x: {
                                stacked: true
                            },
                            y: {
                                stacked: true,
                                beginAtZero: true
                            }
                        }
                    }
                });
                debugLog('Top customers chart created successfully');
            } catch (error) {
                debugLog('Error creating top customers chart:', error);
            }
        }

      
        // =============================================
        // FAULT MANAGEMENT REPORT FUNCTIONS
        // =============================================
        async function loadFaultReports() {
            debugLog('Loading fault reports...');

            try {
                // Load all fault data in parallel
                const [summaryData, typeData, urgencyData, trendsData, brandData, statusData] = await Promise.all([
                    tryLoadFaultData('GetFaultSummaryData'),
                    tryLoadFaultData('GetFaultTypeDistribution'),
                    tryLoadFaultData('GetUrgencyDistribution'),
                    tryLoadFaultData('GetFaultTrendsData'),
                    tryLoadFaultData('GetBrandFaultAnalysis'),
                    tryLoadFaultData('GetFaultStatusDistribution')
                ]);

                const faultData = {
                    summary: summaryData,
                    faultTypes: typeData,
                    urgencyLevels: urgencyData,
                    trends: trendsData,
                    brands: brandData,
                    status: statusData
                };

                await createFaultCharts(faultData);

            } catch (error) {
                debugLog('Error in loadFaultReports:', error);
                // Use sample data as fallback
                const sampleData = getSampleFaultData();
                await createFaultCharts(sampleData);
            }
        }

        async function tryLoadFaultData(actionName) {
            try {
                const response = await fetch(`/Reports/${actionName}`);
                if (response.ok) {
                    const data = await response.json();
                    debugLog(`Successfully loaded ${actionName} from API`);
                    return data;
                }
                return null;
            } catch (error) {
                debugLog(`Error loading ${actionName} from API:`, error);
                return null;
            }
        }

        async function createFaultCharts(data) {
            try {
                // Update summary cards
                if (data.summary) {
                    document.getElementById('totalFaults').textContent = data.summary.TotalFaults || '180';
                    document.getElementById('pendingFaults').textContent = data.summary.PendingFaults || '34';
                    document.getElementById('highPriorityFaults').textContent = data.summary.HighPriorityFaults || '18';
                    document.getElementById('avgResolutionDays').textContent =
                        data.summary.AverageResolutionDays ? data.summary.AverageResolutionDays.toFixed(1) : '3.2';
                } else {
                    // Fallback to hardcoded
                    document.getElementById('totalFaults').textContent = '180';
                    document.getElementById('pendingFaults').textContent = '34';
                    document.getElementById('highPriorityFaults').textContent = '18';
                    document.getElementById('avgResolutionDays').textContent = '3.2';
                }

                // Create fault type chart
                if (data.faultTypes && data.faultTypes.length > 0) {
                    createFaultTypeChart(data.faultTypes);
                } else {
                    createFaultTypeChart(getSampleFaultData().faultTypes);
                }

                // Create urgency chart
                if (data.urgencyLevels && data.urgencyLevels.length > 0) {
                    createFaultUrgencyChart(data.urgencyLevels);
                } else {
                    createFaultUrgencyChart(getSampleFaultData().urgencyLevels);
                }

                // Create trends chart
                if (data.trends && data.trends.length > 0) {
                    createFaultTrendsChart(data.trends);
                } else {
                    createFaultTrendsChart(getSampleFaultData().trends);
                }

                // Create brand analysis chart
                if (data.brands && data.brands.length > 0) {
                    createBrandFaultChart(data.brands);
                } else {
                    createBrandFaultChart(getSampleFaultData().brands);
                }

                // Create status chart
                if (data.status && data.status.length > 0) {
                    createFaultStatusChart(data.status);
                } else {
                    createFaultStatusChart(getSampleFaultData().status);
                }

            } catch (error) {
                debugLog('Error creating fault charts:', error);
            }
        }

        function createFaultTypeChart(data) {
            try {
                const ctx = document.getElementById('faultTypeChart').getContext('2d');
                new Chart(ctx, {
                    type: 'doughnut',
                    data: {
                        labels: data.map(item => item.FaultType || item.faultType),
                        datasets: [{
                            data: data.map(item => item.Count || item.count),
                            backgroundColor: [
                                '#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0',
                                '#9966FF', '#FF9F40', '#FF6384', '#C9CBCF'
                            ]
                        }]
                    },
                    options: {
                        responsive: true,
                        plugins: {
                            legend: {
                                position: 'right',
                            }
                        }
                    }
                });
                debugLog('Fault type chart created successfully');
            } catch (error) {
                debugLog('Error creating fault type chart:', error);
            }
        }

        function createFaultUrgencyChart(data) {
            try {
                const ctx = document.getElementById('faultUrgencyChart').getContext('2d');
                new Chart(ctx, {
                    type: 'bar',
                    data: {
                        labels: data.map(item => item.UrgencyLevel || item.urgencyLevel),
                        datasets: [{
                            label: 'Number of Faults',
                            data: data.map(item => item.Count || item.count),
                            backgroundColor: [
                                '#28a745', '#ffc107', '#fd7e14', '#dc3545', '#6f42c1'
                            ],
                            borderWidth: 1
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
                debugLog('Fault urgency chart created successfully');
            } catch (error) {
                debugLog('Error creating fault urgency chart:', error);
            }
        }

        function createFaultTrendsChart(data) {
            try {
                const ctx = document.getElementById('faultTrendsChart').getContext('2d');
                new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: data.map(item => item.Period || item.period),
                        datasets: [
                            {
                                label: 'Total Faults',
                                data: data.map(item => item.TotalFaults || item.totalFaults),
                                borderColor: 'rgba(220, 53, 69, 1)',
                                backgroundColor: 'rgba(220, 53, 69, 0.1)',
                                borderWidth: 3,
                                tension: 0.4,
                                fill: true
                            },
                            {
                                label: 'Pending',
                                data: data.map(item => item.PendingFaults || item.pendingFaults),
                                borderColor: 'rgba(255, 193, 7, 1)',
                                backgroundColor: 'rgba(255, 193, 7, 0.1)',
                                borderWidth: 3,
                                tension: 0.4,
                                fill: true
                            },
                            {
                                label: 'Resolved',
                                data: data.map(item => item.ResolvedFaults || item.resolvedFaults),
                                borderColor: 'rgba(40, 167, 69, 1)',
                                backgroundColor: 'rgba(40, 167, 69, 0.1)',
                                borderWidth: 3,
                                tension: 0.4,
                                fill: true
                            }
                        ]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
                debugLog('Fault trends chart created successfully');
            } catch (error) {
                debugLog('Error creating fault trends chart:', error);
            }
        }

        function createBrandFaultChart(data) {
            try {
                const ctx = document.getElementById('brandFaultChart').getContext('2d');
                new Chart(ctx, {
                    type: 'bar',
                    data: {
                        labels: data.map(item => item.Brand || item.brand),
                        datasets: [{
                            label: 'Total Faults',
                            data: data.map(item => item.TotalFaults || item.totalFaults),
                            backgroundColor: 'rgba(220, 53, 69, 0.8)'
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
                debugLog('Brand fault chart created successfully');
            } catch (error) {
                debugLog('Error creating brand fault chart:', error);
            }
        }

        function createFaultStatusChart(data) {
            try {
                const ctx = document.getElementById('faultStatusChart').getContext('2d');
                new Chart(ctx, {
                    type: 'pie',
                    data: {
                        labels: data.map(item => item.Status || item.status),
                        datasets: [{
                            data: data.map(item => item.Count || item.count),
                            backgroundColor: [
                                'rgba(108, 117, 125, 0.8)',  // Pending - gray
                                'rgba(23, 162, 184, 0.8)',   // In Progress - cyan
                                'rgba(40, 167, 69, 0.8)',    // Resolved - green
                                'rgba(255, 193, 7, 0.8)',    // Awaiting Parts - yellow
                                'rgba(220, 53, 69, 0.8)'     // Cancelled - red
                            ]
                        }]
                    },
                    options: {
                        responsive: true,
                        plugins: {
                            legend: {
                                position: 'bottom'
                            }
                        }
                    }
                });
                debugLog('Fault status chart created successfully');
            } catch (error) {
                debugLog('Error creating fault status chart:', error);
            }
        }
        // =============================================
        // MY CUSTOM REPORTS FUNCTIONS
        // =============================================
        async function loadMyCustomReports() {
            debugLog('Loading my custom reports...');

            try {
                // Load your custom data
                const customData = await tryLoadCustomData();

                if (customData) {
                    await createCustomCharts(customData);
                } else {
                    // Use sample data for testing
                    debugLog('Using sample custom data');
                    const sampleData = getSampleCustomData();
                    await createCustomCharts(sampleData);
                }
            } catch (error) {
                debugLog('Error in loadMyCustomReports:', error);
                // Use sample data as fallback
                const sampleData = getSampleCustomData();
                await createCustomCharts(sampleData);
            }
        }

        async function tryLoadCustomData() {
            try {
                // Replace with your actual API endpoints
                const urls = [
                    '@Url.Action("GetMyCustomData", "MyReports")',
                    '/MyReports/GetMyCustomData',
                    '/api/mycustomreports'
                ];

                for (const url of urls) {
                    try {
                        debugLog(`Trying custom URL: ${url}`);
                        const response = await fetch(url);
                        if (response.ok) {
                            const data = await response.json();
                            debugLog('Successfully loaded custom data from:', url);
                            return data;
                        }
                    } catch (e) {
                        debugLog(`Failed to load custom data from ${url}:`, e.message);
                    }
                }
                return null;
            } catch (error) {
                debugLog('Error in tryLoadCustomData:', error);
                return null;
            }
        }

        async function createCustomCharts(data) {
            try {
                // Update summary cards
                document.getElementById('totalRevenue').textContent = data.summary?.totalRevenue || '$12,450';
                document.getElementById('activeProjects').textContent = data.summary?.activeProjects || '15';
                document.getElementById('customerSatisfaction').textContent = data.summary?.customerSatisfaction || '92%';
                document.getElementById('pendingTasks').textContent = data.summary?.pendingTasks || '8';

                // Create monthly performance chart
                createMonthlyPerformanceChart(data.performance);

                // Create project distribution chart
                createProjectDistributionChart(data.projects);

                // Create growth trends chart
                createGrowthTrendsChart(data.growth);

            } catch (error) {
                debugLog('Error creating custom charts:', error);
            }
        }

        function createMonthlyPerformanceChart(data) {
            try {
                const ctx = document.getElementById('monthlyPerformanceChart').getContext('2d');
                new Chart(ctx, {
                    type: 'bar',
                    data: {
                        labels: data.map(p => p.month),
                        datasets: [
                            {
                                label: 'Revenue',
                                data: data.map(p => p.revenue),
                                backgroundColor: 'rgba(54, 162, 235, 0.8)',
                                borderColor: 'rgba(54, 162, 235, 1)',
                                borderWidth: 1
                            },
                            {
                                label: 'Target',
                                data: data.map(p => p.target),
                                backgroundColor: 'rgba(255, 99, 132, 0.8)',
                                borderColor: 'rgba(255, 99, 132, 1)',
                                borderWidth: 1
                            }
                        ]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
                debugLog('Monthly performance chart created successfully');
            } catch (error) {
                debugLog('Error creating monthly performance chart:', error);
            }
        }

        function createProjectDistributionChart(data) {
            try {
                const ctx = document.getElementById('projectDistributionChart').getContext('2d');
                new Chart(ctx, {
                    type: 'doughnut',
                    data: {
                        labels: data.map(p => p.category),
                        datasets: [{
                            data: data.map(p => p.count),
                            backgroundColor: [
                                'rgba(255, 99, 132, 0.8)',
                                'rgba(54, 162, 235, 0.8)',
                                'rgba(255, 205, 86, 0.8)',
                                'rgba(75, 192, 192, 0.8)',
                                'rgba(153, 102, 255, 0.8)'
                            ],
                            borderWidth: 2
                        }]
                    },
                    options: {
                        responsive: true,
                        plugins: {
                            legend: {
                                position: 'bottom'
                            }
                        }
                    }
                });
                debugLog('Project distribution chart created successfully');
            } catch (error) {
                debugLog('Error creating project distribution chart:', error);
            }
        }

        function createGrowthTrendsChart(data) {
            try {
                const ctx = document.getElementById('growthTrendsChart').getContext('2d');
                new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: data.map(g => g.quarter),
                        datasets: [
                            {
                                label: 'Revenue Growth',
                                data: data.map(g => g.revenue),
                                borderColor: 'rgba(40, 167, 69, 1)',
                                backgroundColor: 'rgba(40, 167, 69, 0.1)',
                                borderWidth: 3,
                                tension: 0.4,
                                fill: true
                            },
                            {
                                label: 'Customer Growth',
                                data: data.map(g => g.customers),
                                borderColor: 'rgba(0, 123, 255, 1)',
                                backgroundColor: 'rgba(0, 123, 255, 0.1)',
                                borderWidth: 3,
                                tension: 0.4,
                                fill: true
                            }
                        ]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
                debugLog('Growth trends chart created successfully');
            } catch (error) {
                debugLog('Error creating growth trends chart:', error);
            }
        }

        function getSampleCustomData() {
            return {
                summary: {
                    totalRevenue: '$12,450',
                    activeProjects: 15,
                    customerSatisfaction: '92%',
                    pendingTasks: 8
                },
                performance: [
                    { month: 'Jan', revenue: 8500, target: 8000 },
                    { month: 'Feb', revenue: 9200, target: 8500 },
                    { month: 'Mar', revenue: 7800, target: 9000 },
                    { month: 'Apr', revenue: 10500, target: 9500 },
                    { month: 'May', revenue: 12450, target: 11000 },
                    { month: 'Jun', revenue: 11800, target: 12000 }
                ],
                projects: [
                    { category: 'Web Development', count: 6 },
                    { category: 'Mobile Apps', count: 4 },
                    { category: 'Consulting', count: 3 },
                    { category: 'Maintenance', count: 2 }
                ],
                growth: [
                    { quarter: 'Q1 2023', revenue: 45, customers: 120 },
                    { quarter: 'Q2 2023', revenue: 52, customers: 145 },
                    { quarter: 'Q3 2023', revenue: 48, customers: 138 },
                    { quarter: 'Q4 2023', revenue: 65, customers: 165 },
                    { quarter: 'Q1 2024', revenue: 72, customers: 189 },
                    { quarter: 'Q2 2024', revenue: 85, customers: 215 }
                ]
            };
        }
         // =============================================
        // SAMPLE DATA FOR TESTING
        // =============================================
        function getSampleMaintenanceData() {
            const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'];
            return {
                trends: months.map((month, index) => ({
                    Month: month,
                    Completed: Math.floor(Math.random() * 20) + 10,
                    Scheduled: Math.floor(Math.random() * 15) + 5,
                    InProgress: Math.floor(Math.random() * 8) + 2
                })),
                statusDistribution: [
                    { Status: 'Complete', Count: 45 },
                    { Status: 'Scheduled', Count: 22 },
                    { Status: 'In Progress', Count: 8 },
                    { Status: 'Rescheduled', Count: 5 },
                    { Status: 'Cancelled', Count: 3 }
                ],
                technicians: [
                    { Technician: 'Kayla Williams', Completed: 18, Scheduled: 5, InProgress: 2 },
                    { Technician: 'Kayla Williams', Completed: 15, Scheduled: 8, InProgress: 1 },
                    { Technician: 'Kayla Williams', Completed: 12, Scheduled: 3, InProgress: 4 },
                    { Technician: 'Kayla Williams', Completed: 10, Scheduled: 6, InProgress: 2 }
                ]
            };
        }

        function getSampleCustomerData() {
            return {
                summary: {
                    totalCustomers: 45,
                    activeCustomers: 38,
                    totalAllocated: 67,
                    availableFridges: 23
                },
                customerStatus: [
                    { status: 'Active', count: 38 },
                    { status: 'Inactive', count: 7 }
                ],
                locations: [
                    { location: 'Downtown', customerCount: 15, activeAllocations: 22 },
                    { location: 'Northside', customerCount: 12, activeAllocations: 18 },
                    { location: 'Southside', customerCount: 8, activeAllocations: 12 },
                    { location: 'East End', customerCount: 6, activeAllocations: 9 },
                    { location: 'Westside', customerCount: 4, activeAllocations: 6 }
                ],
                allocationSummary: [
                    { status: 'Allocated', count: 67, percentage: 65 },
                    { status: 'Returned', count: 25, percentage: 24 },
                    { status: 'Scrapped', count: 11, percentage: 11 }
                ],
                trends: [
                    { month: 'Jan', allocations: 12, returns: 4, scrapped: 1 },
                    { month: 'Feb', allocations: 15, returns: 3, scrapped: 2 },
                    { month: 'Mar', allocations: 18, returns: 5, scrapped: 1 },
                    { month: 'Apr', allocations: 14, returns: 6, scrapped: 3 },
                    { month: 'May', allocations: 16, returns: 4, scrapped: 2 },
                    { month: 'Jun', allocations: 13, returns: 3, scrapped: 2 }
                ],
                topCustomers: [
                    { customerName: 'ABC Restaurant', activeAllocations: 8, returnedAllocations: 3 },
                    { customerName: 'XYZ Hotel', activeAllocations: 6, returnedAllocations: 2 },
                    { customerName: 'City Hospital', activeAllocations: 5, returnedAllocations: 1 },
                    { customerName: 'Tech Campus', activeAllocations: 4, returnedAllocations: 4 },
                    { customerName: 'Food Market', activeAllocations: 4, returnedAllocations: 2 }
                ]
            };
       }

        function getSampleFaultData() {
            const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'];
            return {
                summary: {
                    totalFaults: 120,
                    pendingFaults: 34,
                    highPriorityFaults: 18,
                    avgResolutionDays: 3.2
                },
                faultTypes: [
                    { faultType: 'Electrical', count: 45 },
                    { faultType: 'Cooling Issue', count: 38 },
                    { faultType: 'Door Seal', count: 32 },
                    { faultType: 'Compressor', count: 28 },
                    { faultType: 'Thermostat', count: 22 },
                    { faultType: 'Water Leak', count: 15 }
                ],
                urgencyLevels: [
                    { urgencyLevel: 'Low', count: 45 },
                    { urgencyLevel: 'Medium', count: 78 },
                    { urgencyLevel: 'High', count: 32 },
                    { urgencyLevel: 'Critical', count: 18 },
                    { urgencyLevel: 'Emergency', count: 7 }
                ],
                trends: months.map((month, index) => ({
                    period: month,
                    totalFaults: Math.floor(Math.random() * 30) + 20,
                    pendingFaults: Math.floor(Math.random() * 15) + 5,
                    resolvedFaults: Math.floor(Math.random() * 25) + 10
                })),
                brands: [
                    { brand: 'Samsung', totalFaults: 45 },
                    { brand: 'LG', totalFaults: 38 },
                    { brand: 'Hisense', totalFaults: 32 },
                    { brand: 'Defy', totalFaults: 28 },
                    { brand: 'Kelvinator', totalFaults: 22 }
                ],
                status: [
                    { status: 'Pending', count: 34 },
                    { status: 'In Progress', count: 28 },
                    { status: 'Resolved', count: 89 },
                    { status: 'Awaiting Parts', count: 12 },
                    { status: 'Cancelled', count: 7 }
                ]
            };
        }
    </script>
}

<style>
    .chart-container {
        width: 100%;
        height: 500px;
        background: white;
        border-radius: 10px;
        padding: 20px;
        margin: 20px 0;
        position: relative;
    }

    .card {
        box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
        border: 1px solid rgba(0, 0, 0, 0.125);
        margin-bottom: 1rem;
    }

    .card-header {
        border-bottom: 1px solid rgba(0, 0, 0, 0.125);
        background-color: #f8f9fa;
    }

    .table th {
        border-top: none;
        font-weight: 600;
        background-color: #f8f9fa;
    }

    .card .card-body {
        padding: 1.25rem;
    }

    .text-end {
        text-align: right !important;
    }

    .alert {
        margin-bottom: 1rem;
    }
</style> 