@model FridgeManagementSystem.Controllers.DashboardViewModel
@{
    ViewData["Title"] = "Fault Reports Analytics";

    var startDate = ViewBag.StartDate as string;
    var endDate = ViewBag.EndDate as string;
}

<div class="container-fluid">
    <!-- Page Heading -->
    <div class="d-sm-flex align-items-center justify-content-between mb-4">
        <h1 class="h3 mb-0 text-gray-800">Fault Reports Analytics</h1>
        <div>
            <a asp-action="Dashboard" class="btn btn-secondary">
                <i class="fas fa-tachometer-alt"></i> Dashboard
            </a>
            <a asp-action="Index" class="btn btn-primary">
                <i class="fas fa-list"></i> View All Faults
            </a>
        </div>
    </div>

    <!-- Date Range Filter -->
    <div class="card shadow mb-4">
        <div class="card-header py-3">
            <h6 class="m-0 font-weight-bold text-primary">
                <i class="fas fa-filter"></i> Report Period
            </h6>
        </div>
        <div class="card-body">
            <form method="get" class="form-inline">
                <div class="form-group mr-3 mb-2">
                    <label for="startDate" class="mr-2">From:</label>
                    <input type="date" class="form-control" id="startDate" name="startDate" value="@startDate">
                </div>
                <div class="form-group mr-3 mb-2">
                    <label for="endDate" class="mr-2">To:</label>
                    <input type="date" class="form-control" id="endDate" name="endDate" value="@endDate">
                </div>
                <button type="submit" class="btn btn-primary mb-2">
                    <i class="fas fa-sync-alt"></i> Update Report
                </button>
                <a href="@Url.Action("Reports")" class="btn btn-secondary mb-2 ml-2">
                    <i class="fas fa-times"></i> Clear
                </a>
            </form>
            <small class="text-muted">
                Showing data from @DateTime.Parse(startDate).ToString("MMM dd, yyyy") to @DateTime.Parse(endDate).ToString("MMM dd, yyyy")
            </small>
        </div>
    </div>

    <!-- Summary Cards -->
    <div class="row mb-4">
        <!-- Total Faults -->
        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-primary shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-primary text-uppercase mb-1">
                                Total Fault Reports
                            </div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">@Model.TotalFaults</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-exclamation-triangle fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- High Priority Faults -->
        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-danger shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-danger text-uppercase mb-1">
                                High Priority
                            </div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">@Model.HighPriorityFaults</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-arrow-up fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Unattended Faults -->
        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-warning shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-warning text-uppercase mb-1">
                                Pending Reports
                            </div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">@Model.UnattendedFaults</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-clock fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Today's Repairs -->
        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-info shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-info text-uppercase mb-1">
                                Active Repairs
                            </div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">@Model.TodaysRepairs</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-tools fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <!-- Recent Fault Reports -->
        <div class="col-lg-8">
            <div class="card shadow mb-4">
                <div class="card-header py-3 d-flex justify-content-between align-items-center">
                    <h6 class="m-0 font-weight-bold text-primary">
                        <i class="fas fa-list"></i> Recent Fault Reports
                    </h6>
                    <span class="badge badge-primary">Last 10 Reports</span>
                </div>
                <div class="card-body">
                    @if (Model.RecentFaults.Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-bordered table-hover" width="100%" cellspacing="0">
                                <thead class="bg-light">
                                    <tr>
                                        <th>Date</th>
                                        <th>Fridge</th>
                                        <th>Customer</th>
                                        <th>Fault Type</th>
                                        <th>Urgency</th>
                                        <th>Status</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var faultReport in Model.RecentFaults)
                                    {
                                        <tr>
                                            <td>@faultReport.ReportDate.ToString("MM/dd/yyyy")</td>
                                            <td>
                                                @if (faultReport.Fridge != null)
                                                {
                                                    <div>
                                                        <strong>@faultReport.Fridge.Brand @faultReport.Fridge.Model</strong>
                                                        <small class="text-muted d-block">SN: @faultReport.Fridge.SerialNumber</small>
                                                    </div>
                                                }
                                                else
                                                {
                                                    <span class="text-muted">N/A</span>
                                                }
                                            </td>
                                            <td>
                                                @if (faultReport.Fridge?.Customer != null)
                                                {
                                                    @faultReport.Fridge.Customer.FullName
                                                }
                                                else
                                                {
                                                    <span class="text-muted">N/A</span>
                                                }
                                            </td>
                                            <td>
                                                <span class="badge bg-info">@faultReport.FaultType</span>
                                            </td>
                                            <td>
                                                <span class="badge @GetUrgencyBadgeClass(faultReport.UrgencyLevel)">@faultReport.UrgencyLevel</span>
                                            </td>
                                            <td>
                                                <span class="badge @GetStatusBadgeClass(faultReport.Status.ToString())">@faultReport.Status</span>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-4">
                            <i class="fas fa-check-circle fa-3x text-success mb-3"></i>
                            <h5 class="text-success">No Fault Reports</h5>
                            <p class="text-muted">No fault reports found for the selected period.</p>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Statistics Sidebar -->
        <div class="col-lg-4">
            <!-- Status Distribution -->
            <div class="card shadow mb-4">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-primary">
                        <i class="fas fa-chart-pie"></i> Status Distribution
                    </h6>
                </div>
                <div class="card-body">
                    @{
                        var statusGroups = Model.RecentFaults.GroupBy(f => f.Status)
                        .Select(g => new { Status = g.Key, Count = g.Count() })
                        .OrderByDescending(g => g.Count);
                    }
                    @if (statusGroups.Any())
                    {
                        <div class="chart-pie pt-4 pb-2">
                            @foreach (var group in statusGroups)
                            {
                                <div class="mb-2">
                                    <div class="d-flex justify-content-between">
                                        <span class="badge @GetStatusBadgeClass(group.Status.ToString())">
                                            @group.Status
                                        </span>
                                        <strong>@group.Count</strong>
                                    </div>
                                    <div class="progress mt-1">
                                        @{
                                            var percentage = (group.Count * 100) / Math.Max(Model.RecentFaults.Count, 1);
                                        }
                                        <div class="progress-bar @GetStatusProgressBarClass(group.Status.ToString())"
                                             role="progressbar" style="width: @percentage%"
                                             aria-valuenow="@percentage" aria-valuemin="0" aria-valuemax="100"></div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <p class="text-muted text-center">No status data available</p>
                    }
                </div>
            </div>

            <!-- Urgency Distribution -->
            <div class="card shadow mb-4">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-primary">
                        <i class="fas fa-exclamation-circle"></i> Urgency Levels
                    </h6>
                </div>
                <div class="card-body">
                    @{
                        var urgencyGroups = Model.RecentFaults.GroupBy(f => f.UrgencyLevel)
                        .Select(g => new { Urgency = g.Key, Count = g.Count() })
                        .OrderByDescending(g => g.Urgency);
                    }
                    @if (urgencyGroups.Any())
                    {
                        <div class="list-group list-group-flush">
                            @foreach (var group in urgencyGroups)
                            {
                                <div class="list-group-item d-flex justify-content-between align-items-center">
                                    <span class="badge @GetUrgencyBadgeClass(group.Urgency)">
                                        @group.Urgency
                                    </span>
                                    <span class="font-weight-bold">@group.Count</span>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <p class="text-muted text-center">No urgency data available</p>
                    }
                </div>
            </div>

            <!-- Quick Actions -->
            <div class="card shadow">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-primary">
                        <i class="fas fa-bolt"></i> Quick Actions
                    </h6>
                </div>
                <div class="card-body text-center">
                    <a asp-action="Create" class="btn btn-success btn-sm mb-2 w-100">
                        <i class="fas fa-plus-circle"></i> New Fault Report
                    </a>
                    <a asp-action="Index" class="btn btn-primary btn-sm mb-2 w-100">
                        <i class="fas fa-list"></i> View All Faults
                    </a>
                    <a asp-action="Dashboard" class="btn btn-info btn-sm w-100">
                        <i class="fas fa-tachometer-alt"></i> Dashboard
                    </a>
                </div>
            </div>
        </div>
    </div>

    <!-- Export Section -->
    <div class="card shadow mt-4">
        <div class="card-header py-3">
            <h6 class="m-0 font-weight-bold text-primary">
                <i class="fas fa-download"></i> Export Reports
            </h6>
        </div>
        <div class="card-body text-center">
            <div class="row">
                <div class="col-md-4 mb-3">
                    <button class="btn btn-outline-primary w-100">
                        <i class="fas fa-file-pdf"></i> PDF Report
                    </button>
                </div>
                <div class="col-md-4 mb-3">
                    <button class="btn btn-outline-success w-100">
                        <i class="fas fa-file-excel"></i> Excel Export
                    </button>
                </div>
                <div class="col-md-4 mb-3">
                    <button class="btn btn-outline-info w-100" onclick="window.print()">
                        <i class="fas fa-print"></i> Print Report
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

@functions {
    public string GetStatusBadgeClass(string status)
    {
        return status?.ToLower() switch
        {
            "pending" => "bg-warning",
            "inprogress" => "bg-primary",
            "onhold" => "bg-info",
            "complete" => "bg-success",
            "cancelled" => "bg-secondary",
            _ => "bg-secondary"
        };
    }

    public string GetStatusProgressBarClass(string status)
    {
        return status?.ToLower() switch
        {
            "pending" => "bg-warning",
            "inprogress" => "bg-primary",
            "onhold" => "bg-info",
            "complete" => "bg-success",
            "cancelled" => "bg-secondary",
            _ => "bg-secondary"
        };
    }

    public string GetUrgencyBadgeClass(UrgencyLevel urgencyLevel)
    {
        return urgencyLevel switch
        {
            UrgencyLevel.Critical or UrgencyLevel.Emergency => "bg-danger",
            UrgencyLevel.High => "bg-warning",
            UrgencyLevel.Medium => "bg-primary",
            UrgencyLevel.Low => "bg-secondary",
            _ => "bg-secondary"
        };
    }
}

@section Scripts {
    <script>
        $(document).ready(function() {
            // Set default date range to last 30 days if not set
            if (!$('#startDate').val()) {
                var start = new Date();
                start.setDate(start.getDate() - 30);
                document.getElementById('startDate').value = start.toISOString().split('T')[0];
            }

            if (!$('#endDate').val()) {
                var end = new Date();
                document.getElementById('endDate').value = end.toISOString().split('T')[0];
            }

            // Auto-submit form when dates change
            $('#startDate, #endDate').change(function() {
                if ($('#startDate').val() && $('#endDate').val()) {
                    $('form').submit();
                }
            });
        });
    </script>
}