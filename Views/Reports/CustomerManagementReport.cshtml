@model Dictionary<string, object>
@{
    ViewData["Title"] = "Customer Management Report";
}

<style>
    /* 3D Customer Management Styles */
    .customer-management-section {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border-radius: 20px;
        padding: 30px;
        margin: 20px 0;
        transform: perspective(1000px) rotateX(5deg);
        transition: all 0.3s ease;
        box-shadow: 0 20px 40px rgba(0,0,0,0.3), 0 15px 15px rgba(0,0,0,0.2), inset 0 -5px 15px rgba(0,0,0,0.1);
        color: white;
        position: relative;
        overflow: hidden;
    }

        .customer-management-section::before {
            content: '';
            position: absolute;
            top: -50%;
            left: -50%;
            width: 200%;
            height: 200%;
            background: radial-gradient(circle, rgba(255,255,255,0.1) 0%, transparent 70%);
            transform: rotate(45deg);
        }

        .customer-management-section:hover {
            transform: perspective(1000px) rotateX(0deg) translateY(-5px);
            box-shadow: 0 25px 50px rgba(0,0,0,0.4), 0 20px 20px rgba(0,0,0,0.3), inset 0 -5px 20px rgba(0,0,0,0.2);
        }

    .stat-card-3d {
        background: rgba(255, 255, 255, 0.1);
        backdrop-filter: blur(10px);
        border-radius: 15px;
        padding: 20px;
        margin: 10px;
        border: 1px solid rgba(255, 255, 255, 0.2);
        transform: perspective(1000px) rotateY(-5deg);
        transition: all 0.3s ease;
        box-shadow: 0 10px 20px rgba(0,0,0,0.2);
    }

        .stat-card-3d:hover {
            transform: perspective(1000px) rotateY(0deg) translateY(-5px);
            box-shadow: 0 15px 30px rgba(0,0,0,0.3);
        }

    .customer-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 15px;
        margin: 20px 0;
    }

    .floating-badge {
        transform: translateY(0);
        transition: all 0.3s ease;
        box-shadow: 0 5px 15px rgba(0,0,0,0.2);
    }

        .floating-badge:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 25px rgba(0,0,0,0.3);
        }

    .customer-item {
        background: rgba(255, 255, 255, 0.1);
        border-radius: 10px;
        padding: 15px;
        margin: 10px 0;
        border-left: 4px solid #4facfe;
        transform: perspective(500px) rotateY(-2deg);
        transition: all 0.3s ease;
    }

        .customer-item:hover {
            transform: perspective(500px) rotateY(0deg) translateX(5px);
            background: rgba(255, 255, 255, 0.15);
        }
</style>

<!-- CUSTOMER MANAGEMENT SECTION -->
<div class="customer-management-section">
    <!-- Header -->
    <div class="text-center mb-4">
        <h1 class="display-4 mb-2">🏪 Customer Management</h1>
        <p class="lead">Customer Management Subsystem - Real-time Dashboard</p>
        <div class="floating-badge badge bg-warning text-dark">Subsystem A</div>
    </div>

    <!-- Key Statistics Grid -->
    <div class="customer-grid">
        <div class="stat-card-3d text-center">
            <h3 class="mb-1">@Model["TotalCustomers"]</h3>
            <small>Total Customers</small>
            <div class="mt-2">
                <span class="badge bg-success">@Model["ActiveCustomers"] Active</span>
            </div>
        </div>

        <div class="stat-card-3d text-center">
            <h3 class="mb-1">@Model["TotalFridges"]</h3>
            <small>Total Fridges</small>
            <div class="mt-2">
                <span class="badge bg-info">@Model["AllocatedFridges"] Allocated</span>
            </div>
        </div>

        <div class="stat-card-3d text-center">
            <h3 class="mb-1">@Model["AvailableFridges"]</h3>
            <small>Available Fridges</small>
            <div class="mt-2">
                <span class="badge bg-warning">@Model["LowStockItems"] Low Stock</span>
            </div>
        </div>

        <div class="stat-card-3d text-center">
            <h3 class="mb-1">@Model["PendingPurchaseRequests"]</h3>
            <small>Purchase Requests</small>
            <div class="mt-2">
                <span class="badge bg-danger">@Model["UrgentPurchaseRequests"] Urgent</span>
            </div>
        </div>
    </div>

    <!-- Recent Activity -->
    <div class="row mt-4">
        <!-- Recent Customers -->
        <div class="col-md-6">
            <h5>👥 Recent Customers</h5>
            @if (Model["RecentCustomers"] is List<Customer> recentCustomers && recentCustomers.Any())
            {
                foreach (var customer in recentCustomers.Take(5))
                {
                    <div class="customer-item">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <strong>@customer.FullName</strong>
                                <br>
                                <small>@customer.ShopType • @customer.PhoneNumber</small>
                            </div>
                            <span class="badge bg-light text-dark">@customer.RegistrationDate.ToString("MMM dd")</span>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="customer-item">
                    <p class="text-center text-muted mb-0">No recent customers</p>
                </div>
            }
        </div>

        <!-- Recent Allocations -->
        <div class="col-md-6">
            <h5>📦 Recent Allocations</h5>
            @if (Model["RecentAllocations"] is List<FridgeAllocation> recentAllocations && recentAllocations.Any())
            {
                foreach (var allocation in recentAllocations.Take(5))
                {
                    <div class="customer-item">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <strong>@allocation.Customer?.FullName</strong>
                                <br>
                                <small>@allocation.Fridge?.Model • Qty: @allocation.QuantityAllocated</small>
                            </div>
                            <span class="badge bg-light text-dark">@allocation.AllocationDate.ToString("MMM dd")</span>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="customer-item">
                    <p class="text-center text-muted mb-0">No recent allocations</p>
                </div>
            }
        </div>
    </div>

    <!-- Quick Actions -->
    <div class="text-center mt-4">
        <div class="btn-group" role="group">
            <button class="btn btn-outline-light floating-badge mx-1" onclick="showCustomerDetails()">
                📋 View Details
            </button>
            <button class="btn btn-outline-light floating-badge mx-1" onclick="showAllocationReport()">
                🚚 Allocation Report
            </button>
            <button class="btn btn-outline-light floating-badge mx-1" onclick="showPurchaseRequests()">
                📊 Purchase Requests
            </button>
        </div>
    </div>
</div>

<!-- JavaScript for Interactive Elements -->
<script>
    // 3D Parallax Effect
    document.addEventListener('mousemove', (e) => {
        const section = document.querySelector('.customer-management-section');
        const x = (e.clientX / window.innerWidth - 0.5) * 10;
        const y = (e.clientY / window.innerHeight - 0.5) * 10;

        section.style.transform = `perspective(1000px) rotateX(${5 - y}deg) rotateY(${-5 + x}deg)`;
    });

    // Interactive functions
    function showCustomerDetails() {
        alert('Opening Customer Details Report...');
        // You can implement navigation to detailed reports here
    }

    function showAllocationReport() {
        alert('Opening Allocation Report...');
        // You can implement navigation to allocation reports here
    }

    function showPurchaseRequests() {
        alert('Opening Purchase Requests...');
        // You can implement navigation to purchase requests here
    }

    // Auto-refresh data every 30 seconds
    setInterval(() => {
        console.log('Refreshing customer management data...');
        // You can implement AJAX refresh here
    }, 30000);
</script>