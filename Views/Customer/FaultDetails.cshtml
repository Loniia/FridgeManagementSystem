@model FridgeManagementSystem.Models.FaultReport
@{
    Layout = "_Layout";
    ViewData["Title"] = "Fault Details";

    // Resolve TaskStatus ambiguity by using the full namespace
    var status = Model.Status;
}

<div class="container-fluid">
    <div class="row justify-content-center">
        <div class="col-lg-10">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h4 class="mb-0">
                        <i class="fas fa-info-circle"></i> Fault Details - @Model.FaultType
                    </h4>
                </div>
                <div class="card-body">
                    <!-- Display Messages -->
                    @if (TempData["SuccessMessage"] != null)
                    {
                        <div class="alert alert-success alert-dismissible fade show" role="alert">
                            <i class="fas fa-check-circle"></i> @TempData["SuccessMessage"]
                            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                        </div>
                    }
                    @if (TempData["ErrorMessage"] != null)
                    {
                        <div class="alert alert-danger alert-dismissible fade show" role="alert">
                            <i class="fas fa-exclamation-circle"></i> @TempData["ErrorMessage"]
                            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                        </div>
                    }

                    <div class="row">
                        <!-- Basic Information -->
                        <div class="col-md-6">
                            <div class="card mb-4">
                                <div class="card-header bg-light">
                                    <h5 class="mb-0">Basic Information</h5>
                                </div>
                                <div class="card-body">
                                    <dl class="row">

                                        <dt class="col-sm-4">Report Date:</dt>
                                        <dd class="col-sm-8">@Model.ReportDate.ToString("dd MMM yyyy HH:mm")</dd>

                                        <dt class="col-sm-4">Fridge:</dt>
                                        <dd class="col-sm-8">
                                            @if (Model.Fridge != null)
                                            {
                                                @Model.Fridge.Brand @Model.Fridge.Model
                                                <small class="text-muted d-block">@Model.Fridge.FridgeType</small>
                                            }
                                            else
                                            {
                                                <span class="text-muted">N/A</span>
                                            }
                                        </dd>

                                        <dt class="col-sm-4">Fault Type:</dt>
                                        <dd class="col-sm-8">
                                            <span class="badge bg-info">@Model.FaultType</span>
                                        </dd>

                                        <dt class="col-sm-4">Urgency Level:</dt>
                                        <dd class="col-sm-8">
                                            @{
                                                var urgencyBadgeClass = Model.UrgencyLevel.ToString() switch
                                                {
                                                    "Low" => "bg-secondary",
                                                    "Medium" => "bg-warning",
                                                    "High" => "bg-danger",
                                                    "Critical" => "bg-dark",
                                                    _ => "bg-secondary"
                                                };
                                            }
                                            <span class="badge @urgencyBadgeClass">@Model.UrgencyLevel</span>
                                        </dd>

                                        <dt class="col-sm-4">Status:</dt>
                                        <dd class="col-sm-8">
                                            @{
                                                var statusBadgeClass = status.ToString() switch
                                                {
                                                    "Pending" => "bg-warning",
                                                    "InProgress" => "bg-primary",
                                                    "Completed" => "bg-success",
                                                    "Cancelled" => "bg-secondary",
                                                    _ => "bg-secondary"
                                                };
                                            }
                                            <span class="badge @statusBadgeClass">@status</span>
                                        </dd>
                                    </dl>
                                </div>
                            </div>
                        </div>

                        <!-- Fault Description & Actions -->
                        <div class="col-md-6">
                            <div class="card mb-4">
                                <div class="card-header bg-light">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <h5 class="mb-0">Fault Description</h5>
                                        @if (status.ToString() == "Pending")
                                        {
                                            <button type="button" class="btn btn-sm btn-outline-primary"
                                                    onclick="enableDescriptionEdit()">
                                                <i class="fas fa-edit"></i> Edit
                                            </button>
                                        }
                                    </div>
                                </div>
                                <div class="card-body">
                                    <div id="descriptionView">
                                        <p id="descriptionText">@Model.FaultDescription</p>
                                    </div>
                                    <div id="descriptionEdit" style="display: none;">
                                        <textarea id="descriptionInput" class="form-control" rows="4">@Model.FaultDescription</textarea>
                                        <div class="mt-2">
                                            <button type="button" class="btn btn-sm btn-success"
                                                    onclick="updateDescription(@Model.FaultReportId)">
                                                <i class="fas fa-save"></i> Save
                                            </button>
                                            <button type="button" class="btn btn-sm btn-secondary"
                                                    onclick="cancelDescriptionEdit()">
                                                <i class="fas fa-times"></i> Cancel
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Actions -->
                            <div class="card">
                                <div class="card-header bg-light">
                                    <h5 class="mb-0">Actions</h5>
                                </div>
                                <div class="card-body">
                                    <div class="d-grid gap-2">
                                        <a asp-action="MyFaults" class="btn btn-secondary">
                                            <i class="fas fa-arrow-left"></i> Back to My Faults
                                        </a>

                                        @if (status.ToString() == "Pending")
                                        {
                                            <form asp-action="CancelFault" method="post" class="d-inline">
                                                @Html.AntiForgeryToken()
                                                <input type="hidden" name="id" value="@Model.FaultReportId" />
                                                <button type="submit" class="btn btn-danger w-100"
                                                        onclick="return confirm('Are you sure you want to cancel this fault report? This action cannot be undone.')">
                                                    <i class="fas fa-times"></i> Cancel Fault Report
                                                </button>
                                            </form>
                                        }

                                        <a href="@Url.Action("FaultStatus", new { id = Model.FaultReportId })" class="btn btn-info">
                                            <i class="fas fa-sync-alt"></i> Check Status Updates
                                        </a>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Repair Progress (if available) -->
                    @if (Model.RepairSchedules != null && Model.RepairSchedules.Any())
                    {
                        <div class="card mt-4">
                            <div class="card-header bg-light">
                                <h5 class="mb-0">Repair Progress</h5>
                            </div>
                            <div class="card-body">
                                @foreach (var repair in Model.RepairSchedules.OrderByDescending(r => r.CreatedDate))
                                {
                                    <div class="mb-3 p-3 border rounded">
                                        <div class="d-flex justify-content-between align-items-start">
                                            <h6 class="mb-1">
                                                @if (!string.IsNullOrEmpty(repair.Status))
                                                {
                                                    <span class="badge bg-primary">@repair.Status</span>
                                                }
                                            </h6>
                                            <small class="text-muted">@repair.CreatedDate.ToString("dd MMM yyyy HH:mm")</small>
                                        </div>
                                        @if (!string.IsNullOrEmpty(repair.Diagnosis))
                                        {
                                            <p class="mb-1"><strong>Diagnosis:</strong> @repair.Diagnosis</p>
                                        }
                                        @if (!string.IsNullOrEmpty(repair.RepairNotes))
                                        {
                                            <p class="mb-0"><strong>Notes:</strong> @repair.RepairNotes</p>
                                        }
                                    </div>
                                }
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function enableDescriptionEdit() {
            document.getElementById('descriptionView').style.display = 'none';
            document.getElementById('descriptionEdit').style.display = 'block';
        }

        function cancelDescriptionEdit() {
            document.getElementById('descriptionEdit').style.display = 'none';
            document.getElementById('descriptionView').style.display = 'block';
            // Reset textarea to original value
            document.getElementById('descriptionInput').value = document.getElementById('descriptionText').textContent;
        }

        function updateDescription(faultReportId) {
            var newDescription = document.getElementById('descriptionInput').value.trim();

            if (!newDescription) {
                alert('Description cannot be empty.');
                return;
            }

            $.post('@Url.Action("UpdateFaultDescription")', {
                id: faultReportId,
                description: newDescription
            })
            .done(function (response) {
                if (response.success) {
                    // Update the displayed text
                    document.getElementById('descriptionText').textContent = newDescription;
                    cancelDescriptionEdit();

                    // Show success message
                    alert(response.message);
                } else {
                    alert(response.message || 'Error updating description.');
                }
            })
            .fail(function () {
                alert('Error updating description. Please try again.');
            });
        }

        // Handle form submission confirmation
        document.addEventListener('DOMContentLoaded', function() {
            const cancelForm = document.querySelector('form[asp-action="CancelFault"]');
            if (cancelForm) {
                cancelForm.addEventListener('submit', function(e) {
                    if (!confirm('Are you sure you want to cancel this fault report? This action cannot be undone.')) {
                        e.preventDefault();
                    }
                });
            }
        });
    </script>
}