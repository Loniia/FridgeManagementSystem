@model FridgeManagementSystem.Models.FaultReport

@{
    Layout = "_Layout";
    ViewData["Title"] = "Cancel Fault Report";

    // Resolve TaskStatus ambiguity
    var status = Model.Status.ToString();
}

<div class="row justify-content-center">
    <div class="col-md-6">
        <div class="card">
            <div class="card-header bg-warning text-white">
                <h4 class="mb-0">Cancel Fault Report</h4>
            </div>
            <div class="card-body">
                <div class="alert alert-warning">
                    <i class="fas fa-exclamation-triangle"></i>
                    <strong>Are you sure you want to cancel this fault report?</strong>
                </div>

                <div class="fault-info mb-4">
                    <h5>Fault Details:</h5>
                    <dl class="row">

                        <dt class="col-sm-4">Reported Date:</dt>
                        <dd class="col-sm-8">@Model.ReportDate.ToString("MMM dd, yyyy HH:mm")</dd>

                        <dt class="col-sm-4">Fault Type:</dt>
                        <dd class="col-sm-8">
                            <span class="badge bg-info">@Model.FaultType</span>
                        </dd>

                        <dt class="col-sm-4">Urgency Level:</dt>
                        <dd class="col-sm-8">
                            <span class="badge @GetUrgencyBadgeClass(Model.UrgencyLevel)">
                                @Model.UrgencyLevel
                            </span>
                        </dd>

                        <dt class="col-sm-4">Fridge:</dt>
                        <dd class="col-sm-8">
                            @if (Model.Fridge != null)
                            {
                                @Model.Fridge.Brand @Model.Fridge.Model
                                <small class="text-muted d-block">@Model.Fridge.FridgeType</small>
                            }
                            else
                            {
                                <span class="text-muted">N/A</span>
                            }
                        </dd>

                        <dt class="col-sm-4">Description:</dt>
                        <dd class="col-sm-8">@Model.FaultDescription</dd>

                        <dt class="col-sm-4">Current Status:</dt>
                        <dd class="col-sm-8">
                            <span class="badge @GetStatusBadgeClass(status)">
                                @status
                            </span>
                        </dd>
                    </dl>
                </div>

                <form asp-action="CancelFault" method="post">
                    <input type="hidden" name="id" value="@Model.FaultReportId" />
                    @Html.AntiForgeryToken()

                    <div class="form-group mb-3">
                        <label for="cancellationReason" class="form-label">Reason for Cancellation (Optional):</label>
                        <textarea class="form-control" id="cancellationReason" name="cancellationReason"
                                  rows="3" placeholder="Please provide a reason for cancellation..."></textarea>
                        <small class="form-text text-muted">
                            This will help us improve our service.
                        </small>
                    </div>

                    <div class="alert alert-info">
                        <i class="fas fa-info-circle"></i>
                        <strong>Note:</strong>
                        @if (status != "Pending")
                        {
                            <text>This fault report can no longer be cancelled as it's already @status.ToLower().</text>
                        }
                        else
                        {
                            <text>Once cancelled, this fault report cannot be reopened. You will need to create a new fault report if the issue persists.</text>
                        }
                    </div>

                    <div class="d-flex gap-2 mt-4">
                        @if (status == "Pending")
                        {
                            <button type="submit" class="btn btn-danger flex-fill">
                                <i class="fas fa-times-circle"></i> Confirm Cancellation
                            </button>
                        }
                        else
                        {
                            <button type="button" class="btn btn-secondary flex-fill" disabled>
                                <i class="fas fa-ban"></i> Cannot Cancel (@status)
                            </button>
                        }
                        <a href="@Url.Action("FaultDetails", new { id = Model.FaultReportId })"
                           class="btn btn-outline-secondary flex-fill">
                            <i class="fas fa-arrow-left"></i> Back to Details
                        </a>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

@functions {
    private string GetUrgencyBadgeClass(UrgencyLevel urgencyLevel)
    {
        return urgencyLevel switch
        {
            UrgencyLevel.Low => "bg-success",
            UrgencyLevel.Medium => "bg-warning",
            UrgencyLevel.High => "bg-orange",
            UrgencyLevel.Critical => "bg-danger",
            _ => "bg-secondary"
        };
    }

    private string GetStatusBadgeClass(string status)
    {
        return status?.ToLower() switch
        {
            "pending" => "bg-warning",
            "inprogress" => "bg-primary",
            "completed" => "bg-success",
            "cancelled" => "bg-secondary",
            _ => "bg-secondary"
        };
    }
}

<style>
    .bg-orange {
        background-color: #ff9800 !important;
        color: white !important;
    }

    .fault-info dl dt {
        font-weight: 600;
    }

    .fault-info dl dd {
        margin-bottom: 0.5rem;
    }
</style>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const form = document.querySelector('form');
            const submitBtn = form.querySelector('button[type="submit"]');

            if (submitBtn) {
                form.addEventListener('submit', function(e) {
                    if (!confirm('Are you sure you want to cancel this fault report? This action cannot be undone.')) {
                        e.preventDefault();
                    }
                });
            }
        });
    </script>
}