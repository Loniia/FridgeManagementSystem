@model FridgeManagementSystem.Models.CustomerAllocationViewModel
@{
    Layout = "_Layout";
    ViewData["Title"] = "Allocate Fridge";
}

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">

<style>
    body {
        background: linear-gradient(to right, #f0f4f8, #d9e2ec);
        font-family: 'Segoe UI', sans-serif;
        color: #333;
    }

    .allocation-card {
        background: #ffffff;
        border-radius: 20px;
        box-shadow: 0 20px 40px rgba(0,0,0,0.15);
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        padding: 30px;
        margin-bottom: 30px;
    }

        .allocation-card:hover {
            transform: translateY(-10px) rotateX(5deg);
            box-shadow: 0 30px 50px rgba(0,0,0,0.25);
        }

    .fridge-card {
        background: linear-gradient(145deg, #e3f2fd, #bbdefb);
        border-radius: 15px;
        padding: 20px;
        box-shadow: 0 10px 20px rgba(0,0,0,0.1);
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        margin-bottom: 15px;
    }

        .fridge-card:hover {
            transform: translateY(-5px) rotateX(3deg);
            box-shadow: 0 20px 40px rgba(0,0,0,0.2);
        }

    .fridge-image {
        width: 100px;
        height: 100px;
        border-radius: 12px;
        box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        background: linear-gradient(145deg, #ffffff, #e6e6e6);
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .btn-allocate {
        background: linear-gradient(135deg, #4facfe, #00f2fe);
        color: white;
        font-weight: 600;
        transition: transform 0.2s ease, box-shadow 0.2s ease;
    }

        .btn-allocate:hover {
            transform: scale(1.05);
            box-shadow: 0 10px 30px rgba(0,0,0,0.3);
        }

    .alert {
        border-radius: 12px;
        box-shadow: 0 10px 20px rgba(0,0,0,0.1);
    }
</style>

<div class="container mt-5">
    <h2 class="text-center mb-4">Allocate Fridge to @Model.CustomerName</h2>

    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger text-center">@TempData["ErrorMessage"]</div>
    }
    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success text-center">@TempData["SuccessMessage"]</div>
    }

    <div class="allocation-card mx-auto" style="max-width:800px;">
        <form asp-action="Allocate" method="post">
            @Html.AntiForgeryToken()
            <input type="hidden" asp-for="CustomerId" />
            <input type="hidden" asp-for="CustomerName" />

            <div class="mb-3">
                <label asp-for="SelectedFridgeID" class="form-label">Select Fridge</label>
                <select asp-for="SelectedFridgeID" class="form-select" required>
                    <option value="">-- Choose a fridge --</option>
                    @foreach (var fridge in Model.AvailableFridges)
                    {
                        <option value="@fridge.FridgeId">
                            @fridge.Brand @fridge.Model (Stock: @fridge.Quantity)
                        </option>
                    }
                </select>
                <span asp-validation-for="SelectedFridgeID" class="text-danger"></span>
            </div>

            <div class="mb-3">
                <label asp-for="QuantityAllocated" class="form-label">Quantity to Allocate</label>
                <input asp-for="QuantityAllocated" type="number" min="1" class="form-control" required />
                <span asp-validation-for="QuantityAllocated" class="text-danger"></span>
            </div>

            <div class="mb-3">
                <label asp-for="ReturnDate" class="form-label">Expected Return Date</label>
                <input asp-for="ReturnDate" type="date" class="form-control"
                       min="@DateTime.Today.ToString("yyyy-MM-dd")" required />
                <span asp-validation-for="ReturnDate" class="text-danger"></span>
            </div>

            <button type="submit" class="btn btn-allocate w-100 py-2">Allocate Fridge</button>
        </form>
    </div>

    <h4 class="mt-5 mb-3 text-center">Pending Orders</h4>
    <div class="row">
        @foreach (var item in Model.OrderItems)
        {
            <div class="col-md-6">
                <div class="fridge-card d-flex align-items-center">
                    <div class="fridge-image me-3">
                        <i class="fas fa-refrigerator fa-2x text-primary"></i>
                    </div>
                    <div>
                        <h5>@item.FridgeName</h5>
                        <p>Ordered: @item.Quantity</p>
                        <p>Price: @item.Price.ToString("C")</p>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />

    <script>
        console.log('Allocate page loaded');

        // Debug form submission
        document.querySelector('form').addEventListener('submit', function (e) {
            console.log('Form submitted!');
            console.log('CustomerId:', document.querySelector('#CustomerId').value);
            console.log('SelectedFridgeID:', document.querySelector('#SelectedFridgeID').value);
            console.log('QuantityAllocated:', document.querySelector('#QuantityAllocated').value);
            console.log('ReturnDate:', document.querySelector('#ReturnDate').value);

            // Check if form is valid
            if (!this.checkValidity()) {
                console.log('Form is invalid - validation will prevent submission');
            } else {
                console.log('Form is valid - should submit');
            }
        });

        // Check form state on page load
        document.addEventListener('DOMContentLoaded', function () {
            console.log('Form elements found:');
            console.log('- CustomerId:', document.querySelector('#CustomerId')?.value);
            console.log('- SelectedFridgeID:', document.querySelector('#SelectedFridgeID')?.value);
            console.log('- QuantityAllocated:', document.querySelector('#QuantityAllocated')?.value);
            console.log('- ReturnDate:', document.querySelector('#ReturnDate')?.value);

            // Check for validation errors
            const errors = document.querySelectorAll('.text-danger');
            console.log('Validation errors found:', errors.length);
            errors.forEach(error => {
                console.log('Error:', error.textContent);
            });
        });
    </script>
}