@model FridgeManagementSystem.Models.MaintenanceVisit

@{
    ViewData["Title"] = "Schedule Visit";
}

<style>
    /* Main container styling */
    .container {
        max-width: 800px;
        margin: 0 auto;
        padding: 20px;
    }

    /* Card styling */
    .card {
        border: none;
        border-radius: 12px;
        box-shadow: 0 5px 20px rgba(0, 0, 0, 0.1);
        overflow: hidden;
    }

    .card-header {
        background: linear-gradient(135deg, #3498db 0%, #2c3e50 100%);
        color: white;
        padding: 20px 25px;
        font-size: 1.3rem;
        font-weight: 600;
        border-bottom: none;
    }

        .card-header i {
            margin-right: 10px;
        }

    .card-body {
        padding: 30px;
        background-color: #f8f9fa;
    }

    /* Alert styling */
    .alert {
        border-radius: 8px;
        padding: 15px 20px;
        margin-bottom: 25px;
        border: none;
        font-weight: 500;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.08);
    }

    .alert-danger {
        background-color: #ffe6e6;
        color: #d9534f;
        border-left: 4px solid #d9534f;
    }

    .alert-success {
        background-color: #e6f7ee;
        color: #28a745;
        border-left: 4px solid #28a745;
    }

    /* Form styling */
    form {
        background: white;
        padding: 25px;
        border-radius: 10px;
        box-shadow: 0 3px 15px rgba(0, 0, 0, 0.05);
    }

    .form-label {
        font-weight: 600;
        color: #2c3e50;
        margin-bottom: 8px;
        font-size: 0.95rem;
    }

    .form-select, .form-control {
        border-radius: 8px;
        padding: 12px 15px;
        border: 1px solid #e1e5eb;
        font-size: 1rem;
        transition: all 0.3s ease;
        box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.03);
    }

        .form-select:focus, .form-control:focus {
            border-color: #3498db;
            box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.1);
            outline: none;
        }

        .form-control[readonly] {
            background-color: #f8f9fa;
            color: #6c757d;
            border-color: #e9ecef;
        }

    .mb-3 {
        margin-bottom: 1.5rem !important;
    }

    .row {
        margin-right: -10px;
        margin-left: -10px;
    }

        .row > [class^="col-"] {
            padding-right: 10px;
            padding-left: 10px;
        }

    /* Button styling */
    .btn {
        border-radius: 8px;
        padding: 12px 24px;
        font-weight: 600;
        font-size: 1rem;
        transition: all 0.3s ease;
        border: none;
        display: inline-flex;
        align-items: center;
        justify-content: center;
    }

    .btn-primary {
        background: linear-gradient(135deg, #3498db 0%, #2c3e50 100%);
        box-shadow: 0 3px 10px rgba(52, 152, 219, 0.3);
    }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(52, 152, 219, 0.4);
        }

    .btn-secondary {
        background: #6c757d;
        box-shadow: 0 3px 10px rgba(108, 117, 125, 0.3);
    }

        .btn-secondary:hover {
            background: #5a6268;
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(108, 117, 125, 0.4);
        }

    .btn i {
        margin-right: 8px;
    }

    /* Validation styling */
    .text-danger {
        font-size: 0.85rem;
        margin-top: 5px;
        font-weight: 500;
    }

    .field-validation-error {
        color: #d9534f;
    }

    /* Responsive design */
    @@media (max-width: 768px) {
        .container {
            padding: 15px;
        }

        .card-body {
            padding: 20px;
        }

        form {
            padding: 20px;
        }

        .btn {
            width: 100%;
            margin-bottom: 10px;
        }

        .btn-secondary {
            margin-left: 0 !important;
        }
    }

    /* Animation for form elements */
    .form-select, .form-control, .btn {
        transition: all 0.3s ease;
    }

        /* Focus states for accessibility */
        .btn:focus, .form-select:focus, .form-control:focus {
            outline: 2px solid #3498db;
            outline-offset: 2px;
        }
</style>




<div class="container mt-4">
    <div class="card shadow-sm">
        <div class="card-header bg-primary text-white">
            <i class="fas fa-calendar-alt me-2"></i> Schedule Maintenance Visit
        </div>
        <div class="card-body">
            @if (TempData["Error"] != null)
            {
                <div class="alert alert-danger">@TempData["Error"]</div>
            }
            @if (TempData["Message"] != null)
            {
                <div class="alert alert-success">@TempData["Message"]</div>
            }

            <form asp-action="ScheduleVisit" method="post">
                @Html.AntiForgeryToken()

                <div class="mb-3">
                    <label for="requestSelect" class="form-label">Select Maintenance Request</label>

                    <!-- use tag helper asp-items to render the SelectList safely -->
                    <select asp-for="MaintenanceRequestId" asp-items="ViewBag.Requests" class="form-select" id="requestSelect" required>
                        <option value="">-- Select Request --</option>
                    </select>

                    <!-- quick debug: show how many options the controller provided -->
                    <small class="text-muted">Available: @(ViewBag.Requests == null ? 0 : ((IEnumerable<SelectListItem>)ViewBag.Requests).Count())</small>
                </div>

                <div class="mb-3">
                    <label class="form-label">Customer Name</label>
                    <input id="customerName" class="form-control" readonly />
                </div>

                <div class="mb-3">
                    <label class="form-label">Customer Address</label>
                    <input id="customerAddress" class="form-control" readonly />
                </div>

                <div class="mb-3">
                    <label class="form-label">Fridge Model</label>
                    <input id="fridgeModel" class="form-control" readonly />
                </div>

                <div class="row">
                    <div class="col-md-6 mb-3">
                        <label asp-for="ScheduledDate" class="form-label"></label>
                        <input asp-for="ScheduledDate" class="form-control" type="date" />
                        <span asp-validation-for="ScheduledDate" class="text-danger"></span>
                    </div>
                    <div class="col-md-6 mb-3">
                        <label asp-for="ScheduledTime" class="form-label"></label>
                        <input asp-for="ScheduledTime" class="form-control" type="time" />
                        <span asp-validation-for="ScheduledTime" class="text-danger"></span>
                    </div>
                </div>

                <button type="submit" class="btn btn-primary">
                    <i class="fas fa-save me-2"></i> Schedule Visit
                </button>
                <a asp-controller="Maintenance" asp-action="MaintenanceRequests" class="btn btn-secondary">
                    <i class="fas fa-times-circle me-2"></i> Back
                </a>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Parse JSON safely
        const requestsData = @Html.Raw(ViewBag.RequestsJson ?? "[]");

        const requestSelect = document.getElementById('requestSelect');
        const customerNameInput = document.getElementById('customerName');
        const customerAddressInput = document.getElementById('customerAddress');
        const fridgeModelInput = document.getElementById('fridgeModel');

        // Helper to fill the readonly fields
        function fillDetailsById(id) {
            const request = requestsData.find(r => r.id === id);
            if (request) {
                customerNameInput.value = request.customer;
                customerAddressInput.value = request.customerAddress;
                fridgeModelInput.value = request.model;
            } else {
                customerNameInput.value = '';
                customerAddressInput.value = '';
                fridgeModelInput.value = '';
            }
        }

        // On change: populate fields
        requestSelect.addEventListener('change', function () {
            const id = parseInt(this.value) || 0;
            fillDetailsById(id);
        });

        // Optional: preselect the first available option on page load (if any)
        (function preselectFirst() {
            // wait until options rendered
            setTimeout(() => {
                if (requestSelect.options.length > 1 && !requestSelect.value) {
                    // select the first item after placeholder (index 1)
                    requestSelect.selectedIndex = 1;
                    const selectedId = parseInt(requestSelect.value);
                    fillDetailsById(selectedId);
                }
            }, 50);
        })();
    </script>

    <partial name="_ValidationScriptsPartial" />
}


@* @model FinalYearProject.Models.MaintenanceVisit

@if (TempData["Message"] != null)
{
    <div class="alert alert-success">
        @TempData["Message"]
    </div>
}

@{
    ViewData["Title"] = "Schedule Maintenance Visit";
}

<h2>@ViewData["Title"]</h2>

@if (TempData["Error"] != null)
{
    <div class="alert alert-danger">@TempData["Error"]</div>
}

@if (TempData["Message"] != null)
{
    <div class="alert alert-success">@TempData["Message"]</div>
}

<form asp-action="ScheduleVisit" method="post">
    @Html.AntiForgeryToken()

    <div class="form-group mb-3">
        <label for="FridgeId">Select Fridge</label>
        
       <select id="fridgeDropdown" name="FridgeId" class="form-control">
    <option value="">-- Select Fridge --</option>
    @foreach (var fridge in ViewBag.Fridges)
    {
        string optionHtml = $"<option value='{fridge.FridgeId}' " +
                            $"data-customer-name='{fridge.Customer.CustomerName}' " +
                            $"data-customer-address='{fridge.Customer.Address}'" +
                            (fridge.FridgeId == Model.FridgeId ? " selected" : "") +
                            $">{fridge.FridgeName}</option>"; // <-- show Fridge Name here
        @Html.Raw(optionHtml)
    }
   </select>


    </div>

    <div class="form-group mb-3">
        <label>Customer Name</label>
        <input type="text" class="form-control" id="customerName" readonly value="@Model.Fridge?.Customer?.CustomerName" />
    </div>

    <div class="form-group mb-3">
        <label>Customer Address</label>
        <input type="text" class="form-control" id="customerAddress" readonly value="@Model.Fridge?.Customer?.Address" />
    </div>

    <div class="form-group mb-3">
        <label asp-for="ScheduledDate">Scheduled Date</label>
        <input asp-for="ScheduledDate" class="form-control" type="date" />
        <span asp-validation-for="ScheduledDate" class="text-danger"></span>
    </div>

    <div class="form-group mb-3">
        <label asp-for="ScheduledTime">Scheduled Time</label>
        <input asp-for="ScheduledTime" class="form-control" type="time" />
        <span asp-validation-for="ScheduledTime" class="text-danger"></span>
    </div>

    <div class="form-group mb-3">
        <label asp-for="VisitNotes">Visit Notes</label>
        <textarea asp-for="VisitNotes" class="form-control">@Model.VisitNotes</textarea>
        <span asp-validation-for="VisitNotes" class="text-danger"></span>
    </div>

    <div class="form-group mb-3">
        <label>Fault Report (separate items with ;)</label>
        <input type="text" class="form-control" name="FaultReportString" value="@Model.FaultReportString" />
    </div>

    <div class="form-group mb-3">
        <label>Components Used (separate items with ;)</label>
        <input type="text" class="form-control" name="ComponentUsedString" value="@Model.ComponentUsedString" />
    </div>

    <div class="form-group mb-3">
        <label>Maintenance Checklist (separate items with ;)</label>
        <input type="text" class="form-control" name="MaintenanceChecklistString" value="@Model.MaintenanceChecklistString" />
    </div>

    <button type="submit" class="btn btn-primary">Schedule Visit</button>
</form>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

    <script>
        // Update Customer Name & Address when fridge changes
        document.getElementById('fridgeDropdown').addEventListener('change', function () {
            var selectedOption = this.options[this.selectedIndex];
            document.getElementById('customerName').value = selectedOption.dataset.customerName || '';
            document.getElementById('customerAddress').value = selectedOption.dataset.customerAddress || '';
        });
    </script>
} *@

@* //Comments for understandning:  *@

@* 1️⃣ Razor Dropdown / Options

Always render <option> using @Html.Raw() or <text> if you need dynamic attributes.

Keep the Fridge Name in the dropdown (@fridge.FridgeName) and never mix C# inline in the attribute.

Store extra info for JS (like data-customer-name and data-customer-address) only as data- attributes.

2️⃣ JavaScript

Only use JS to read data- attributes and fill input fields.

Avoid manipulating Razor variables in JS — just update HTML input values.

Keep the ids of inputs (customerName, customerAddress) consistent.

3️⃣ POST Action

Always check for an existing maintenance request before adding a visit.

If a visit already exists, update it instead of creating a new one — this prevents duplicate key errors.

Update the linked MaintenanceRequest.TaskStatus to Scheduled every time.

Wrap _context.SaveChanges() in a try/catch and display meaningful TempData errors.

4️⃣ Model Binding / Validation

Keep your form field names in sync with your model properties.

Validate the model after IDs are assigned, not before.

Use TempData for success/error messages — they display reliably across redirects.

5️⃣ General Maintenance Tips

Don’t touch the Razor <option> code unless you fully understand tag helper restrictions.

Always test one fridge selection before submitting the form.

Backup the controller/view before making changes — that way you can always revert if something breaks. *@