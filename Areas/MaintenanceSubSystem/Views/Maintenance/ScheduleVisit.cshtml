@model FridgeManagementSystem.Models.MaintenanceVisit

@{
    ViewData["Title"] = "Schedule Visit";
}

<style>
    /* Main container styling */
    .container {
        max-width: 800px;
        margin: 0 auto;
        padding: 20px;
    }

    /* Card styling */
    .card {
        border: none;
        border-radius: 12px;
        box-shadow: 0 5px 20px rgba(0, 0, 0, 0.1);
        overflow: hidden;
    }

    .card-header {
        background: linear-gradient(135deg, #3498db 0%, #2c3e50 100%);
        color: white;
        padding: 20px 25px;
        font-size: 1.3rem;
        font-weight: 600;
        border-bottom: none;
    }

        .card-header i {
            margin-right: 10px;
        }

    .card-body {
        padding: 30px;
        background-color: #f8f9fa;
    }

    /* Alert styling */
    .alert {
        border-radius: 8px;
        padding: 15px 20px;
        margin-bottom: 25px;
        border: none;
        font-weight: 500;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.08);
    }

    .alert-danger {
        background-color: #ffe6e6;
        color: #d9534f;
        border-left: 4px solid #d9534f;
    }

    .alert-success {
        background-color: #e6f7ee;
        color: #28a745;
        border-left: 4px solid #28a745;
    }

    /* Form styling */
    form {
        background: white;
        padding: 25px;
        border-radius: 10px;
        box-shadow: 0 3px 15px rgba(0, 0, 0, 0.05);
    }

    .form-label {
        font-weight: 600;
        color: #2c3e50;
        margin-bottom: 8px;
        font-size: 0.95rem;
    }

    .form-select, .form-control {
        border-radius: 8px;
        padding: 12px 15px;
        border: 1px solid #e1e5eb;
        font-size: 1rem;
        transition: all 0.3s ease;
        box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.03);
    }

        .form-select:focus, .form-control:focus {
            border-color: #3498db;
            box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.1);
            outline: none;
        }

        .form-control[readonly] {
            background-color: #f8f9fa;
            color: #6c757d;
            border-color: #e9ecef;
        }

    .mb-3 {
        margin-bottom: 1.5rem !important;
    }

    .row {
        margin-right: -10px;
        margin-left: -10px;
    }

        .row > [class^="col-"] {
            padding-right: 10px;
            padding-left: 10px;
        }

    /* Button styling */
    .btn {
        border-radius: 8px;
        padding: 12px 24px;
        font-weight: 600;
        font-size: 1rem;
        transition: all 0.3s ease;
        border: none;
        display: inline-flex;
        align-items: center;
        justify-content: center;
    }

    .btn-primary {
        background: linear-gradient(135deg, #3498db 0%, #2c3e50 100%);
        box-shadow: 0 3px 10px rgba(52, 152, 219, 0.3);
    }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(52, 152, 219, 0.4);
        }

    .btn-secondary {
        background: #6c757d;
        box-shadow: 0 3px 10px rgba(108, 117, 125, 0.3);
    }

        .btn-secondary:hover {
            background: #5a6268;
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(108, 117, 125, 0.4);
        }

    .btn-info {
        background: #17a2b8;
        box-shadow: 0 3px 10px rgba(23, 162, 184, 0.3);
    }

        .btn-info:hover {
            background: #138496;
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(23, 162, 184, 0.4);
        }

    .btn i {
        margin-right: 8px;
    }

    /* Validation styling */
    .text-danger {
        font-size: 0.85rem;
        margin-top: 5px;
        font-weight: 500;
    }

    .field-validation-error {
        color: #d9534f;
    }

    /* Responsive design */
    @@media (max-width: 768px) {
        .container {
            padding: 15px;
        }

        .card-body {
            padding: 20px;
        }

        form {
            padding: 20px;
        }

        .btn {
            width: 100%;
            margin-bottom: 10px;
        }

        .btn-secondary {
            margin-left: 0 !important;
        }
    }

    /* Animation for form elements */
    .form-select, .form-control, .btn {
        transition: all 0.3s ease;
    }

        /* Focus states for accessibility */
        .btn:focus, .form-select:focus, .form-control:focus {
            outline: 2px solid #3498db;
            outline-offset: 2px;
        }

    /* Calendar Modal Styling */
    .fc-toolbar {
        background: linear-gradient(135deg, #3498db 0%, #2c3e50 100%);
        color: white;
        padding: 15px;
        border-radius: 8px;
        margin-bottom: 20px !important;
    }

    .fc-toolbar-title {
        color: white !important;
        font-weight: 600;
    }

    .fc-button {
        background: #6c757d !important;
        border: none !important;
        border-radius: 5px !important;
        font-weight: 500;
    }

    .fc-button-active {
        background: #3498db !important;
    }

    .fc-day-today {
        background-color: rgba(52, 152, 219, 0.1) !important;
    }

    .fc-event {
        border-radius: 5px;
        padding: 3px 6px;
        font-size: 0.8rem;
        font-weight: 500;
        cursor: pointer;
        border: none;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        margin: 1px 0;
    }

    .fc-event-title {
        font-weight: 600;
    }

    .fc-event-time {
        font-weight: 500;
        margin-right: 3px;
    }

    .fc-event:hover {
        transform: translateY(-1px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.15);
    }

    /* Make events more compact */
    .fc-daygrid-event {
        white-space: normal !important;
        line-height: 1.2 !important;
    }
</style>

<div class="container mt-4">
    <div class="card shadow-sm">
        <div class="card-header bg-primary text-white">
            <i class="fas fa-calendar-alt me-2"></i> Schedule Maintenance Visit
        </div>

        <div class="card-body">
            @if (TempData["Error"] != null)
            {
                <div class="alert alert-danger">@TempData["Error"]</div>
            }
            @if (TempData["Message"] != null)
            {
                <div class="alert alert-success">@TempData["Message"]</div>
            }
            <div class="text-end mb-3">
                <button type="button" class="btn btn-info" id="checkAvailabilityBtn">
                    <i class="fas fa-calendar-check me-2"></i> Check Availability
                </button>
            </div>

            <form asp-action="ScheduleVisit" method="post">
                @Html.AntiForgeryToken()

                <div class="mb-3">
                    <label for="requestSelect" class="form-label">Select Maintenance Request</label>
                    <select asp-for="MaintenanceRequestId" asp-items="ViewBag.Requests" class="form-select" id="requestSelect" required>
                        <option value="">-- Select Request --</option>
                    </select>
                    <small class="text-muted">Available: @(ViewBag.Requests == null ? 0 : ((IEnumerable<SelectListItem>)ViewBag.Requests).Count())</small>
                </div>

                <div class="mb-3">
                    <label class="form-label">Customer Name</label>
                    <input id="customerName" class="form-control" readonly />
                </div>

                <div class="mb-3">
                    <label class="form-label">Customer Address</label>
                    <input id="customerAddress" class="form-control" readonly />
                </div>

                <div class="mb-3">
                    <label class="form-label">Fridge Model</label>
                    <input id="fridgeModel" class="form-control" readonly />
                </div>

                <div class="row">
                    <div class="col-md-6 mb-3">
                        <label asp-for="ScheduledDate" class="form-label"></label>
                        <input asp-for="ScheduledDate" class="form-control" type="date" />
                        <span asp-validation-for="ScheduledDate" class="text-danger"></span>
                    </div>
                    <div class="col-md-6 mb-3">
                        <label asp-for="ScheduledTime" class="form-label"></label>
                        <input asp-for="ScheduledTime" class="form-control" type="time" />
                        <span asp-validation-for="ScheduledTime" class="text-danger"></span>
                    </div>
                </div>

                <button type="submit" class="btn btn-primary">
                    <i class="fas fa-save me-2"></i> Schedule Visit
                </button>
                <a asp-controller="Maintenance" asp-action="MaintenanceRequests" class="btn btn-secondary">
                    <i class="fas fa-times-circle me-2"></i> Back
                </a>
            </form>
        </div>
    </div>
</div>

<!-- Availability Modal -->
<div class="modal fade" id="availabilityModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title"><i class="fas fa-calendar-alt me-2"></i> Technician Availability</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="calendar"></div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <!-- FullCalendar CSS/JS -->
    <link href="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.8/main.min.css" rel="stylesheet" />
    <script src="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.8/main.min.js"></script>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            let calendar;
            let calendarInitialized = false;

            // Button click handler to show modal
            document.getElementById('checkAvailabilityBtn').addEventListener('click', function() {
                const modalElement = document.getElementById('availabilityModal');
                const modal = new bootstrap.Modal(modalElement);
                modal.show();
            });

            // Modal shown event
            document.getElementById('availabilityModal').addEventListener('shown.bs.modal', function() {
                if (!calendarInitialized) {
                    initializeCalendar();
                } else {
                    calendar.refetchEvents();
                }
            });

            function initializeCalendar() {
                const calendarEl = document.getElementById('calendar');

                calendar = new FullCalendar.Calendar(calendarEl, {
                    initialView: 'dayGridMonth',
                    headerToolbar: {
                        left: 'prev,next today',
                        center: 'title',
                        right: 'dayGridMonth,timeGridWeek,timeGridDay'
                    },
                    events: {
                        url: '@Url.Action("GetTechnicianSchedule", "Maintenance", new { area = "MaintenanceSubSystem" })',
                        method: 'GET',
                        failure: function() {
                            console.error('Failed to fetch events from server');
                            alert('Failed to fetch calendar events from server');
                        }
                    },
                    height: 500,
                    navLinks: true,
                    editable: false,
                    selectable: false,
                    nowIndicator: true,
                    dayMaxEvents: 3,
                    eventTimeFormat: {
                        hour: 'numeric',
                        minute: '2-digit',
                        meridiem: 'short'
                    },
                    eventContent: function(arg) {
                        const time = arg.event.extendedProps.time;
                        const title = arg.event.title;

                        return {
                            html: `
                                <div class="fc-event-content">
                                    ${time !== 'All Day' ? `<div class="fc-event-time">${time}</div>` : ''}
                                    <div class="fc-event-title">${title}</div>
                                </div>
                            `
                        };
                    },
                    eventClick: function(info) {
                        const event = info.event;
                        const details = event.extendedProps;

                        alert(
                            `Maintenance Visit\n\n` +
                            `Date: ${details.date}\n` +
                            `Time: ${details.time}\n` +
                            `Fridge: ${details.fridge}\n` +
                            `Customer: ${details.customer}\n` +
                            `Address: ${details.address}`
                        );
                    },
                    eventDidMount: function(info) {
                        if (info.event.extendedProps.customer) {
                            info.el.setAttribute('title',
                                `Fridge: ${info.event.title}\n` +
                                `Time: ${info.event.extendedProps.time}\n` +
                                `Customer: ${info.event.extendedProps.customer}`
                            );
                        }
                    },
                    loading: function(isLoading) {
                        if (isLoading) {
                            console.log('Loading calendar events...');
                        } else {
                            console.log('Calendar events loaded, total events:', calendar.getEvents().length);
                        }
                    }
                });

                calendar.render();
                calendarInitialized = true;
            }

            // Fill request details (optional)
            const requestsData = @Html.Raw(ViewBag.RequestsJson ?? "[]");
            const requestSelect = document.getElementById('requestSelect');
            const customerNameInput = document.getElementById('customerName');
            const customerAddressInput = document.getElementById('customerAddress');
            const fridgeModelInput = document.getElementById('fridgeModel');

            function fillDetailsById(id) {
                const request = requestsData.find(r => r.id === id);
                if (request) {
                    customerNameInput.value = request.customer || '';
                    customerAddressInput.value = request.customerAddress || '';
                    fridgeModelInput.value = request.model || '';
                } else {
                    customerNameInput.value = '';
                    customerAddressInput.value = '';
                    fridgeModelInput.value = '';
                }
            }

            if (requestSelect) {
                requestSelect.addEventListener('change', function() {
                    const id = parseInt(this.value) || 0;
                    fillDetailsById(id);
                });

                // Preselect first request
                if (requestSelect.options.length > 1 && !requestSelect.value) {
                    requestSelect.selectedIndex = 1;
                    const initialId = parseInt(requestSelect.value);
                    if (!isNaN(initialId)) {
                        fillDetailsById(initialId);
                    }
                }
            }
        });
    </script>

    <partial name="_ValidationScriptsPartial" />
}
