@model FridgeManagementSystem.Models.MaintenanceDashboardViewModel
@using System.Text.Json
@{
    ViewData["Title"] = "Dashboard";
    var catLabelsJson = JsonSerializer.Serialize(Model.CategoryLabels);
    var catValuesJson = JsonSerializer.Serialize(Model.CategoryValues);
    var monthLabelsJson = JsonSerializer.Serialize(Model.MonthLabels);
    var completedValuesJson = JsonSerializer.Serialize(Model.CompletedValues);
    var completionPercent = Model.CompletionPercent;
}

<style>
    .dashboard-card {
        background: #fff;
        border-radius: 12px;
        box-shadow: 0 4px 20px rgba(0,0,0,0.08);
        border: 1px solid #eef2f7;
        transition: all 0.3s ease;
        overflow: hidden;
    }

        .dashboard-card:hover {
            box-shadow: 0 8px 30px rgba(0,0,0,0.12);
            transform: translateY(-2px);
        }

    .card-header-custom {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        border-bottom: none;
        padding: 1.25rem 1.5rem;
    }

        .card-header-custom h5 {
            margin: 0;
            font-weight: 600;
            font-size: 1.1rem;
        }

        .card-header-custom .badge {
            background: rgba(255,255,255,0.2);
            color: white;
            font-size: 0.8rem;
            padding: 0.4rem 0.8rem;
        }

    .table-custom {
        margin: 0;
    }

        .table-custom thead th {
            background: #f8f9fa;
            border-bottom: 2px solid #e9ecef;
            font-weight: 600;
            color: #495057;
            font-size: 0.85rem;
            padding: 1rem 0.75rem;
        }

        .table-custom tbody td {
            padding: 1rem 0.75rem;
            vertical-align: middle;
            border-color: #f1f3f4;
        }

        .table-custom tbody tr:hover {
            background-color: #f8f9fa;
        }

    .priority-indicator {
        border-left: 4px solid transparent;
    }

    .priority-high {
        border-left-color: #e74c3c;
    }

    .priority-medium {
        border-left-color: #f39c12;
    }

    .priority-low {
        border-left-color: #3498db;
    }

    .chart-container {
        position: relative;
        height: 300px;
    }

    .completion-container {
        text-align: center;
        padding: 1rem;
    }

    .completion-percent {
        font-size: 2rem;
        font-weight: 700;
        color: #27ae60;
        margin-bottom: 0.5rem;
    }

    .completion-label {
        font-size: 0.9rem;
        color: #6c757d;
    }

    .trend-chart-container {
        height: 200px;
        position: relative;
    }

    .btn-schedule {
        background: linear-gradient(135deg, #3498db 0%, #2980b9 100%);
        color: white;
        border: none;
        border-radius: 6px;
        padding: 0.4rem 0.8rem;
        transition: all 0.3s ease;
    }

        .btn-schedule:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(52, 152, 219, 0.3);
            color: white;
        }
</style>

<div class="container-fluid">
    <!-- Header -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h2 class="mb-1" style="color: #2c3e50; font-weight: 700;">Maintenance Dashboard</h2>
            <p class="text-muted mb-0">Real-time overview of maintenance operations</p>
        </div>
        <button class="btn btn-outline-secondary" onclick="window.print();">
            <i class="fas fa-print me-2"></i>Print Report
        </button>
    </div>

    <!-- Table on Top -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="dashboard-card">
                <div class="card-header-custom d-flex justify-content-between align-items-center">
                    <h5>
                        <i class="fas fa-clock me-2"></i>Requests Needing Scheduling
                    </h5>
                    <span class="badge">@Model.PendingRequestsNeedingScheduling.Count pending</span>
                </div>
                <div class="card-body p-0">
                    <div class="table-responsive">
                        <table class="table table-custom">
                            <thead>
                                <tr>
                                   
                                    <th>Customer</th>
                                    <th>Fridge Details</th>
                                    <th>Request Date</th>
                                    <th>Days Pending</th>
                                    <th>Action</th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (Model.PendingRequestsNeedingScheduling.Any())
                                {
                                    foreach (var request in Model.PendingRequestsNeedingScheduling)
                                    {
                                        <tr class="priority-indicator @(request.DaysPending > 7 ? "priority-high" : request.DaysPending > 3 ? "priority-medium" : "priority-low")">
                                           
                                            <td>
                                                <div class="fw-bold">@request.CustomerName</div>
                                                <small class="text-muted">@request.CustomerAddress</small>
                                            </td>
                                            <td>
                                                <div class="fw-medium">@request.FridgeBrand</div>
                                                <small class="text-muted">@request.FridgeModel</small>
                                            </td>
                                            <td>
                                                <span class="text-dark">@request.RequestDate.ToString("MMM dd, yyyy")</span>
                                            </td>
                                            <td>
                                                <span class="badge @(request.DaysPending > 7 ? "bg-danger" : request.DaysPending > 3 ? "bg-warning" : "bg-info")">
                                                    @request.DaysPending day@(request.DaysPending != 1 ? "s" : "")
                                                </span>
                                            </td>
                                            <td>
                                                <a href="@Url.Action("ScheduleVisit", "Maintenance", new { area = "MaintenanceSubSystem" })"
                                                   class="btn btn-schedule btn-sm">
                                                    <i class="fas fa-calendar-plus me-1"></i>Schedule
                                                </a>
                                            </td>
                                        </tr>
                                    }
                                }
                                else
                                {
                                    <tr>
                                        <td colspan="6" class="text-center text-muted py-5">
                                            <i class="fas fa-check-circle fa-3x mb-3 text-success"></i>
                                            <div class="h5">All maintenance requests are scheduled!</div>
                                            <small>No pending requests requiring immediate attention</small>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Two Charts Below -->
    <div class="row">
        <!-- Bar Chart -->
        <div class="col-lg-6 mb-4">
            <div class="dashboard-card h-100">
                <div class="card-header-custom">
                    <h5>
                        <i class="fas fa-chart-bar me-2"></i>Maintenance Requests by Status
                    </h5>
                </div>
                <div class="card-body">
                    <div class="chart-container">
                        <canvas id="barChart"></canvas>
                    </div>
                </div>
            </div>
        </div>

        <!-- Completion Overview -->
        <div class="col-lg-6 mb-4">
            <div class="dashboard-card h-100">
                <div class="card-header-custom">
                    <h5>
                        <i class="fas fa-chart-pie me-2"></i>Performance Overview
                    </h5>
                </div>
                <div class="card-body">
                    <div class="row h-100">
                        <div class="col-md-5 d-flex flex-column justify-content-center">
                            <div class="completion-container">
                                <canvas id="doughnutChart" width="140" height="140"></canvas>
                                <div class="completion-percent">@Model.CompletionPercent%</div>
                                <div class="completion-label">Overall Completion Rate</div>
                            </div>
                        </div>
                        <div class="col-md-7">
                            <h6 class="text-muted mb-3 text-center">Completed Tasks (Last 6 Months)</h6>
                            <div class="trend-chart-container">
                                <canvas id="lineChart"></canvas>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Chart.js -->
<script src="https://cdn.jsdelivr.net/npm/chart.js@4"></script>
<script>
    const catLabels = @Html.Raw(catLabelsJson);
    const catValues = @Html.Raw(catValuesJson);
    const monthLabels = @Html.Raw(monthLabelsJson);
    const completedValues = @Html.Raw(completedValuesJson);
    const completionPercent = @Model.CompletionPercent;

    // Bar Chart
    const barCtx = document.getElementById('barChart').getContext('2d');
    new Chart(barCtx, {
        type: 'bar',
        data: {
            labels: catLabels,
            datasets: [{
                data: catValues,
                backgroundColor: [
                    '#f39c12', '#3498db', '#9b59b6', '#e67e22', '#27ae60', '#95a5a6'
                ],
                borderWidth: 0,
                borderRadius: 6,
                barPercentage: 0.7
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: { display: false },
                tooltip: {
                    backgroundColor: 'rgba(0,0,0,0.8)',
                    padding: 12,
                    cornerRadius: 8
                }
            },
            scales: {
                y: {
                    beginAtZero: true,
                    ticks: {
                        stepSize: 1,
                        font: { size: 11 }
                    },
                    grid: {
                        color: 'rgba(0,0,0,0.05)'
                    }
                },
                x: {
                    grid: { display: false },
                    ticks: {
                        font: { size: 11 }
                    }
                }
            }
        }
    });

    // Doughnut Chart
    const doughCtx = document.getElementById('doughnutChart').getContext('2d');
    new Chart(doughCtx, {
        type: 'doughnut',
        data: {
            datasets: [{
                data: [completionPercent, Math.max(0, 100 - completionPercent)],
                backgroundColor: ['#27ae60', '#ecf0f1'],
                borderWidth: 0,
                hoverOffset: 8
            }]
        },
        options: {
            cutout: '75%',
            plugins: {
                legend: { display: false },
                tooltip: { enabled: false }
            }
        }
    });

    // Line Chart - Now using 6-month data with proper dates
    const lineCtx = document.getElementById('lineChart').getContext('2d');
    new Chart(lineCtx, {
        type: 'line',
        data: {
            labels: monthLabels,
            datasets: [{
                data: completedValues,
                borderColor: '#3498db',
                backgroundColor: 'rgba(52, 152, 219, 0.1)',
                tension: 0.4,
                fill: true,
                pointBackgroundColor: '#3498db',
                pointBorderColor: '#fff',
                pointBorderWidth: 2,
                pointRadius: 4,
                pointHoverRadius: 6
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: { display: false },
                tooltip: {
                    backgroundColor: 'rgba(0,0,0,0.8)',
                    padding: 8,
                    cornerRadius: 6,
                    displayColors: false,
                    callbacks: {
                        title: function(tooltipItems) {
                            return tooltipItems[0].label + ' Completions';
                        }
                    }
                }
            },
            scales: {
                y: {
                    beginAtZero: true,
                    ticks: {
                        stepSize: 1,
                        font: { size: 10 }
                    },
                    grid: {
                        color: 'rgba(0,0,0,0.05)'
                    }
                },
                x: {
                    ticks: {
                        font: { size: 11 }
                    },
                    grid: {
                        color: 'rgba(0,0,0,0.05)'
                    }
                }
            }
        }
    });
</script>