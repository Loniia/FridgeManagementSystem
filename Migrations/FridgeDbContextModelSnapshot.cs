// <auto-generated />
using System;
using FridgeManagementSystem.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FridgeManagementSystem.Migrations
{
    [DbContext(typeof(FridgeDbContext))]
    partial class FridgeDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FridgeManagementSystem.Models.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("EmployeeRole")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("FridgeManagementSystem.Models.ComponentUsed", b =>
                {
                    b.Property<int>("ComponentUsedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ComponentUsedId"));

                    b.Property<string>("ComponentName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Condition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaintenanceVisitId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ComponentUsedId");

                    b.HasIndex("MaintenanceVisitId");

                    b.ToTable("ComponentUsed");
                });

            modelBuilder.Entity("FridgeManagementSystem.Models.Customer", b =>
                {
                    b.Property<int>("CustomerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerID"));

                    b.Property<int>("ApplicationUserId")
                        .HasColumnType("int");

                    b.Property<string>("ContactInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateOnly>("RegistrationDate")
                        .HasColumnType("date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerID");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique();

                    b.HasIndex("LocationId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("FridgeManagementSystem.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeID"));

                    b.Property<int>("ApplicationUserId")
                        .HasColumnType("int");

                    b.Property<string>("ContactInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmployeeID");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique();

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("FridgeManagementSystem.Models.Fault", b =>
                {
                    b.Property<int>("FaultID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FaultID"));

                    b.Property<string>("ApplianceType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CustomerID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FaultDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("FridgeId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Priority")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReportDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ScheduledDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("FaultID");

                    b.HasIndex("FridgeId");

                    b.ToTable("Faults");
                });

            modelBuilder.Entity("FridgeManagementSystem.Models.FaultReport", b =>
                {
                    b.Property<int>("FaultReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FaultReportId"));

                    b.Property<string>("FaultDescription")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("FaultID")
                        .HasColumnType("int");

                    b.Property<int?>("FaultTechniciansTechnicianID")
                        .HasColumnType("int");

                    b.Property<string>("FaultType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FridgeId")
                        .HasColumnType("int");

                    b.Property<int?>("FridgeId1")
                        .HasColumnType("int");

                    b.Property<int>("MaintenanceVisitId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReportDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StatusFilter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UrgencyLevel")
                        .HasColumnType("int");

                    b.HasKey("FaultReportId");

                    b.HasIndex("FaultID");

                    b.HasIndex("FaultTechniciansTechnicianID");

                    b.HasIndex("FridgeId");

                    b.HasIndex("FridgeId1");

                    b.HasIndex("MaintenanceVisitId");

                    b.ToTable("FaultReport");
                });

            modelBuilder.Entity("FridgeManagementSystem.Models.FaultTechnicians", b =>
                {
                    b.Property<int>("TechnicianID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TechnicianID"));

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RepairID")
                        .HasColumnType("int");

                    b.Property<string>("Specialization")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TechnicianID");

                    b.ToTable("FaultTechnicians");
                });

            modelBuilder.Entity("FridgeManagementSystem.Models.Fridge", b =>
                {
                    b.Property<int>("FridgeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FridgeId"));

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("DateAdded")
                        .HasColumnType("date");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FaultID")
                        .HasColumnType("int");

                    b.Property<string>("FridgeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FridgeType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SupplierID")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FridgeId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SerialNumber")
                        .IsUnique()
                        .HasFilter("[SerialNumber] IS NOT NULL");

                    b.HasIndex("SupplierID");

                    b.ToTable("Fridges");
                });

            modelBuilder.Entity("FridgeManagementSystem.Models.FridgeAllocation", b =>
                {
                    b.Property<int>("AllocationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AllocationID"));

                    b.Property<DateOnly>("AllocationDate")
                        .HasColumnType("date");

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<int>("FridgeID")
                        .HasColumnType("int");

                    b.Property<int>("QuantityAllocated")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("ReturnDate")
                        .IsRequired()
                        .HasColumnType("date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("AllocationID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("FridgeID");

                    b.ToTable("FridgeAllocation");
                });

            modelBuilder.Entity("FridgeManagementSystem.Models.Inventory", b =>
                {
                    b.Property<int>("InventoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InventoryID"));

                    b.Property<int>("FridgeID")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("ReorderPoint")
                        .HasColumnType("int");

                    b.HasKey("InventoryID");

                    b.HasIndex("FridgeID")
                        .IsUnique();

                    b.ToTable("Inventory");
                });

            modelBuilder.Entity("FridgeManagementSystem.Models.Location", b =>
                {
                    b.Property<int>("LoationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LoationId"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Province")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LoationId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("FridgeManagementSystem.Models.MaintenanceChecklist", b =>
                {
                    b.Property<int>("MaintenanceCheckListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MaintenanceCheckListId"));

                    b.Property<string>("AdditionalNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("CondenserCoilsCleaned")
                        .HasColumnType("bit");

                    b.Property<string>("CoolantLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DoorSealCondition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LightingStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaintenanceVisitId")
                        .HasColumnType("int");

                    b.Property<string>("PowerCableCondition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TemperatureStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MaintenanceCheckListId");

                    b.HasIndex("MaintenanceVisitId")
                        .IsUnique();

                    b.ToTable("MaintenanceChecklist");
                });

            modelBuilder.Entity("FridgeManagementSystem.Models.MaintenanceRequest", b =>
                {
                    b.Property<int>("MaintenanceRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MaintenanceRequestId"));

                    b.Property<int>("FridgeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TaskStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MaintenanceRequestId");

                    b.HasIndex("FridgeId");

                    b.ToTable("MaintenanceRequest");
                });

            modelBuilder.Entity("FridgeManagementSystem.Models.MaintenanceVisit", b =>
                {
                    b.Property<int>("MaintenanceVisitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MaintenanceVisitId"));

                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<int>("FridgeId")
                        .HasColumnType("int");

                    b.Property<int>("MaintenanceRequestId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ScheduledDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("ScheduledTime")
                        .HasColumnType("time");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VisitNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("MaintenanceVisitId");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("FridgeId");

                    b.HasIndex("MaintenanceRequestId")
                        .IsUnique();

                    b.ToTable("MaintenanceVisit");
                });

            modelBuilder.Entity("FridgeManagementSystem.Models.MenuItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Controller")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IconClass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MenuCategory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("RequiredRole")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MenuItems");
                });

            modelBuilder.Entity("FridgeManagementSystem.Models.PurchaseRequest", b =>
                {
                    b.Property<int>("RequestID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequestID"));

                    b.Property<string>("AssignedToRole")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<int>("FridgeID")
                        .HasColumnType("int");

                    b.Property<int?>("InventoryID")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsViewed")
                        .HasColumnType("bit");

                    b.Property<string>("ItemFullNames")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("RequestBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateOnly>("RequestDate")
                        .HasColumnType("date");

                    b.Property<string>("RequestNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("RequestType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ViewedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("RequestID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("FridgeID");

                    b.HasIndex("InventoryID");

                    b.ToTable("PurchaseRequests");
                });

            modelBuilder.Entity("FridgeManagementSystem.Models.RepairSchedule", b =>
                {
                    b.Property<int>("RepairID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RepairID"));

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<string>("Diagnosis")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("FaultID")
                        .HasColumnType("int");

                    b.Property<int?>("FaultID1")
                        .HasColumnType("int");

                    b.Property<int?>("FaultReportsFaultReportId")
                        .HasColumnType("int");

                    b.Property<int>("FridgeID")
                        .HasColumnType("int");

                    b.Property<string>("PartsUsed")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ProgressNotes")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<decimal?>("RepairCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateOnly>("RepairDate")
                        .HasColumnType("date");

                    b.Property<string>("RepairNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("RepairScheduleRepairID")
                        .HasColumnType("int");

                    b.Property<int>("ReportID")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("ScheduleTime")
                        .HasColumnType("time");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("TechnicianID")
                        .HasColumnType("int");

                    b.HasKey("RepairID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("FaultID");

                    b.HasIndex("FaultID1");

                    b.HasIndex("FaultReportsFaultReportId");

                    b.HasIndex("FridgeID");

                    b.HasIndex("RepairScheduleRepairID");

                    b.HasIndex("TechnicianID");

                    b.ToTable("RepairSchedules");
                });

            modelBuilder.Entity("FridgeManagementSystem.Models.ScrappedFridge", b =>
                {
                    b.Property<int>("FridgeID")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateOnly>("ScrapDate")
                        .HasColumnType("date");

                    b.HasKey("FridgeID");

                    b.ToTable("ScrappedFridges");
                });

            modelBuilder.Entity("FridgeManagementSystem.Models.ServiceChecks", b =>
                {
                    b.Property<int>("ServiceCheckId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceCheckId"));

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("FridgeId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("LastServiced")
                        .HasColumnType("date");

                    b.Property<int>("Location")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ServiceDetails")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("TechnicianID")
                        .HasColumnType("int");

                    b.HasKey("ServiceCheckId");

                    b.ToTable("ServiceChecks");
                });

            modelBuilder.Entity("FridgeManagementSystem.Models.Supplier", b =>
                {
                    b.Property<int>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplierId"));

                    b.Property<string>("ContactPerson")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("SupplierId");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FridgeManagementSystem.Models.ComponentUsed", b =>
                {
                    b.HasOne("FridgeManagementSystem.Models.MaintenanceVisit", "MaintenanceVisit")
                        .WithMany("ComponentUsed")
                        .HasForeignKey("MaintenanceVisitId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("MaintenanceVisit");
                });

            modelBuilder.Entity("FridgeManagementSystem.Models.Customer", b =>
                {
                    b.HasOne("FridgeManagementSystem.Models.ApplicationUser", "UserAccount")
                        .WithOne("CustomerProfile")
                        .HasForeignKey("FridgeManagementSystem.Models.Customer", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FridgeManagementSystem.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("FridgeManagementSystem.Models.Employee", b =>
                {
                    b.HasOne("FridgeManagementSystem.Models.ApplicationUser", "UserAccount")
                        .WithOne("EmployeeProfile")
                        .HasForeignKey("FridgeManagementSystem.Models.Employee", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("FridgeManagementSystem.Models.Fault", b =>
                {
                    b.HasOne("FridgeManagementSystem.Models.Fridge", "Fridge")
                        .WithMany("Fault")
                        .HasForeignKey("FridgeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Fridge");
                });

            modelBuilder.Entity("FridgeManagementSystem.Models.FaultReport", b =>
                {
                    b.HasOne("FridgeManagementSystem.Models.Fault", "Fault")
                        .WithMany()
                        .HasForeignKey("FaultID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FridgeManagementSystem.Models.FaultTechnicians", null)
                        .WithMany("AssignedFaults")
                        .HasForeignKey("FaultTechniciansTechnicianID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("FridgeManagementSystem.Models.Fridge", "Fridge")
                        .WithMany()
                        .HasForeignKey("FridgeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FridgeManagementSystem.Models.Fridge", null)
                        .WithMany("FaultReport")
                        .HasForeignKey("FridgeId1")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("FridgeManagementSystem.Models.MaintenanceVisit", "MaintenanceVisit")
                        .WithMany("FaultReport")
                        .HasForeignKey("MaintenanceVisitId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Fault");

                    b.Navigation("Fridge");

                    b.Navigation("MaintenanceVisit");
                });

            modelBuilder.Entity("FridgeManagementSystem.Models.Fridge", b =>
                {
                    b.HasOne("FridgeManagementSystem.Models.Customer", "Customer")
                        .WithMany("Fridge")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FridgeManagementSystem.Models.Supplier", "Supplier")
                        .WithMany("Fridge")
                        .HasForeignKey("SupplierID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("FridgeManagementSystem.Models.FridgeAllocation", b =>
                {
                    b.HasOne("FridgeManagementSystem.Models.Customer", "Customer")
                        .WithMany("FridgeAllocation")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FridgeManagementSystem.Models.Fridge", "fridge")
                        .WithMany("FridgeAllocation")
                        .HasForeignKey("FridgeID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("fridge");
                });

            modelBuilder.Entity("FridgeManagementSystem.Models.Inventory", b =>
                {
                    b.HasOne("FridgeManagementSystem.Models.Fridge", "Fridge")
                        .WithOne("Inventories")
                        .HasForeignKey("FridgeManagementSystem.Models.Inventory", "FridgeID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Fridge");
                });

            modelBuilder.Entity("FridgeManagementSystem.Models.MaintenanceChecklist", b =>
                {
                    b.HasOne("FridgeManagementSystem.Models.MaintenanceVisit", "MaintenanceVisit")
                        .WithOne("MaintenanceChecklist")
                        .HasForeignKey("FridgeManagementSystem.Models.MaintenanceChecklist", "MaintenanceVisitId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("MaintenanceVisit");
                });

            modelBuilder.Entity("FridgeManagementSystem.Models.MaintenanceRequest", b =>
                {
                    b.HasOne("FridgeManagementSystem.Models.Fridge", "Fridge")
                        .WithMany("MaintenanceRequest")
                        .HasForeignKey("FridgeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Fridge");
                });

            modelBuilder.Entity("FridgeManagementSystem.Models.MaintenanceVisit", b =>
                {
                    b.HasOne("FridgeManagementSystem.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FridgeManagementSystem.Models.Fridge", "Fridge")
                        .WithMany("MaintenanceVisit")
                        .HasForeignKey("FridgeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FridgeManagementSystem.Models.MaintenanceRequest", "MaintenanceRequest")
                        .WithOne("MaintenanceVisit")
                        .HasForeignKey("FridgeManagementSystem.Models.MaintenanceVisit", "MaintenanceRequestId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Fridge");

                    b.Navigation("MaintenanceRequest");
                });

            modelBuilder.Entity("FridgeManagementSystem.Models.PurchaseRequest", b =>
                {
                    b.HasOne("FridgeManagementSystem.Models.Customer", "Customer")
                        .WithMany("PurchaseRequest")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FridgeManagementSystem.Models.Fridge", "Fridge")
                        .WithMany()
                        .HasForeignKey("FridgeID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FridgeManagementSystem.Models.Inventory", null)
                        .WithMany("PurchaseRequests")
                        .HasForeignKey("InventoryID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Customer");

                    b.Navigation("Fridge");
                });

            modelBuilder.Entity("FridgeManagementSystem.Models.RepairSchedule", b =>
                {
                    b.HasOne("FridgeManagementSystem.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FridgeManagementSystem.Models.Fault", "Fault")
                        .WithMany()
                        .HasForeignKey("FaultID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FridgeManagementSystem.Models.Fault", null)
                        .WithMany("RepairSchedules")
                        .HasForeignKey("FaultID1")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("FridgeManagementSystem.Models.FaultReport", "FaultReports")
                        .WithMany()
                        .HasForeignKey("FaultReportsFaultReportId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("FridgeManagementSystem.Models.Fridge", "Fridge")
                        .WithMany()
                        .HasForeignKey("FridgeID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FridgeManagementSystem.Models.RepairSchedule", null)
                        .WithMany("RecentSchedules")
                        .HasForeignKey("RepairScheduleRepairID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("FridgeManagementSystem.Models.FaultTechnicians", "FaultTechnician")
                        .WithMany()
                        .HasForeignKey("TechnicianID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Fault");

                    b.Navigation("FaultReports");

                    b.Navigation("FaultTechnician");

                    b.Navigation("Fridge");
                });

            modelBuilder.Entity("FridgeManagementSystem.Models.ScrappedFridge", b =>
                {
                    b.HasOne("FridgeManagementSystem.Models.Fridge", "Fridge")
                        .WithOne("ScrappedFridges")
                        .HasForeignKey("FridgeManagementSystem.Models.ScrappedFridge", "FridgeID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Fridge");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("FridgeManagementSystem.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("FridgeManagementSystem.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FridgeManagementSystem.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("FridgeManagementSystem.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("FridgeManagementSystem.Models.ApplicationUser", b =>
                {
                    b.Navigation("CustomerProfile");

                    b.Navigation("EmployeeProfile");
                });

            modelBuilder.Entity("FridgeManagementSystem.Models.Customer", b =>
                {
                    b.Navigation("Fridge");

                    b.Navigation("FridgeAllocation");

                    b.Navigation("PurchaseRequest");
                });

            modelBuilder.Entity("FridgeManagementSystem.Models.Fault", b =>
                {
                    b.Navigation("RepairSchedules");
                });

            modelBuilder.Entity("FridgeManagementSystem.Models.FaultTechnicians", b =>
                {
                    b.Navigation("AssignedFaults");
                });

            modelBuilder.Entity("FridgeManagementSystem.Models.Fridge", b =>
                {
                    b.Navigation("Fault");

                    b.Navigation("FaultReport");

                    b.Navigation("FridgeAllocation");

                    b.Navigation("Inventories");

                    b.Navigation("MaintenanceRequest");

                    b.Navigation("MaintenanceVisit");

                    b.Navigation("ScrappedFridges");
                });

            modelBuilder.Entity("FridgeManagementSystem.Models.Inventory", b =>
                {
                    b.Navigation("PurchaseRequests");
                });

            modelBuilder.Entity("FridgeManagementSystem.Models.MaintenanceRequest", b =>
                {
                    b.Navigation("MaintenanceVisit")
                        .IsRequired();
                });

            modelBuilder.Entity("FridgeManagementSystem.Models.MaintenanceVisit", b =>
                {
                    b.Navigation("ComponentUsed");

                    b.Navigation("FaultReport");

                    b.Navigation("MaintenanceChecklist");
                });

            modelBuilder.Entity("FridgeManagementSystem.Models.RepairSchedule", b =>
                {
                    b.Navigation("RecentSchedules");
                });

            modelBuilder.Entity("FridgeManagementSystem.Models.Supplier", b =>
                {
                    b.Navigation("Fridge");
                });
#pragma warning restore 612, 618
        }
    }
}
